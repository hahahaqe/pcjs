     1                                  ;
     2                                  ;   test386.asm
     3                                  ;   Copyright Â© 2012-2018 Jeff Parsons <Jeff@pcjs.org>
     4                                  ;
     5                                  ;   This file is part of PCjs, a computer emulation software project at <https://www.pcjs.org>.
    26                                  ;
    27                                  ;   Overview
    28                                  ;   --------
    29                                  ;   This file is designed to run both as a test ROM and as a DOS .COM file (hence the "org 0x100"),
    30                                  ;   which is why it has a ".com" extension instead of the more typical ".rom" extension.
    31                                  ;
    32                                  ;   When used as a ROM, it should be installed at physical address 983296 (0xf0100) and aliased at
    33                                  ;   physical address 4294902016 (0xffff0100).  The jump at jmpStart should align with the CPU reset
    34                                  ;   address (%0xfffffff0), which will transfer control to 0xf000:0x0100.  From that point on,
    35                                  ;   all memory accesses should remain within the first 1Mb.
    36                                  ;
    37                                  ;   The code which attempts to update myGDT and addrGDT will have no effect when installed as a ROM,
    38                                  ;   which is fine, because those data structures are predefined with appropriate ROM-based addresses.
    39                                  ;
    40                                  ;   See the machine configuration file "/tools/pc/test386.json5" for a test machine that can load
    41                                  ;   this file as a ROM image.
    42                                  ;
    43                                  ;   REAL32 Notes
    44                                  ;   ------------
    45                                  ;   REAL32 is NOT enabled by default, because based on what I've seen in VirtualBox (and notes at
    46                                  ;   http://geezer.osdevbrasil.net/johnfine/segments.htm), if CS is loaded with a 32-bit code segment
    47                                  ;   while in protected-mode and we then return to real-mode, even if we immediately perform a FAR jump
    48                                  ;   with a real-mode CS, the base of CS will be updated, but all the other segment attributes, like
    49                                  ;   the 32-bit EXT_BIG attribute, remain unchanged.  As a result, the processor will crash as soon as
    50                                  ;   it starts executing 16-bit real-mode code, because it's being misinterpreted as 32-bit code, and
    51                                  ;   there doesn't appear to be anything you can do about it from real-mode.
    52                                  ;
    53                                  ;   The work-around: you MUST load CS with a 16-bit code segment BEFORE returning to real-mode.
    54                                  ;
    55                                  ;   "Unreal mode" works by setting OTHER segment registers, like DS and ES, to 32-bit segments before
    56                                  ;   returning to real-mode -- just not CS.  SS probably shouldn't be set to a 32-bit segment either,
    57                                  ;   because that causes implicit pushes to use ESP instead of SP, even in real-mode.
    58                                  ;
    59                                  ;   The code below ensures that, before returning to real-mode, all of CS, DS, ES, and SS contain
    60                                  ;   16-bit protected-mode selectors; note, however, that my 16-bit protected-mode data descriptor uses
    61                                  ;   a full 20-bit limit, so DS, ES, and SS will still have a limit of 1Mb instead of the usual 64Kb,
    62                                  ;   even after returning to real-mode.  I use the larger limit because it's convenient to have access
    63                                  ;   to the first 1Mb in protected-mode, with or without a 32-bit data segment, and the larger data
    64                                  ;   segment limit shouldn't affect any 16-bit real-mode operations.
    65                                  ;
    66                                  	cpu	386
    67                                  	org	0x100
    68                                  	section .text
    69
    70                                  	%include "dos.inc"
    71                              <1> INT_DOSEXIT			EQU	20H
    72                              <1> INT_DOS				EQU	21H
    73                              <1> DOS_ABORT			EQU	00H
    74                              <1> DOS_STD_CON_INPUT		EQU	01H
    75                              <1> DOS_STD_CON_OUTPUT		EQU	02H
    76                              <1> DOS_STD_AUX_INPUT		EQU	03H
    77                              <1> DOS_STD_AUX_OUTPUT		EQU	04H
    78                              <1> DOS_STD_PRINTER_OUTPUT		EQU	05H
    79                              <1> DOS_RAW_CON_IO			EQU	06H
    80                              <1> DOS_RAW_CON_INPUT		EQU	07H
    81                              <1> DOS_STD_CON_INPUT_NO_ECHO	EQU	08H
    82                              <1> DOS_STD_CON_STRING_OUTPUT	EQU	09H
    83                              <1> DOS_STD_CON_STRING_INPUT	EQU	0AH
    84                              <1> DOS_STD_CON_INPUT_STATUS	EQU	0BH
    85                              <1> DOS_STD_CON_INPUT_FLUSH		EQU	0CH
    86                              <1> DOS_DISK_RESET			EQU	0DH
    87                              <1> DOS_SET_DEFAULT_DRIVE		EQU	0EH
    88                              <1> DOS_FCB_OPEN			EQU	0FH
    89                              <1> DOS_FCB_CLOSE			EQU	10H
    90                              <1> DOS_DIR_SEARCH_FIRST		EQU	11H
    91                              <1> DOS_DIR_SEARCH_NEXT		EQU	12H
    92                              <1> DOS_FCB_DELETE			EQU	13H
    93                              <1> DOS_FCB_SEQ_READ		EQU	14H
    94                              <1> DOS_FCB_SEQ_WRITE		EQU	15H
    95                              <1> DOS_FCB_CREATE			EQU	16H
    96                              <1> DOS_FCB_RENAME			EQU	17H
    97                              <1> DOS_RESERVED18			EQU	18H
    98                              <1> DOS_GET_DEFAULT_DRIVE		EQU	19H
    99                              <1> DOS_SET_DMA			EQU	1AH
   100                              <1> DOS_RESERVED1B			EQU	1BH
   101                              <1> DOS_RESERVED1C			EQU	1CH
   102                              <1> DOS_RESERVED1D			EQU	1DH
   103                              <1> DOS_RESERVED1E			EQU	1EH
   104                              <1> DOS_GET_DEFAULT_DPB		EQU	1FH
   105                              <1> DOS_RESERVED20			EQU	20H
   106                              <1> DOS_FCB_RANDOM_READ		EQU	21H
   107                              <1> DOS_FCB_RANDOM_WRITE		EQU	22H
   108                              <1> DOS_GET_FCB_FILE_LENGTH		EQU	23H
   109                              <1> DOS_GET_FCB_POSITION		EQU	24H
   110                              <1> DOS_SET_INTERRUPT_VECTOR	EQU	25H
   111                              <1> DOS_CREATE_PDB			EQU	26H
   112                              <1> DOS_FCB_RANDOM_READ_BLOCK	EQU	27H
   113                              <1> DOS_FCB_RANDOM_WRITE_BLOCK	EQU	28H
   114                              <1> DOS_PARSE_FILE_DESCRIPTOR	EQU	29H
   115                              <1> DOS_GET_DATE			EQU	2AH
   116                              <1> DOS_SET_DATE			EQU	2BH
   117                              <1> DOS_GET_TIME			EQU	2CH
   118                              <1> DOS_SET_TIME			EQU	2DH
   119                              <1> DOS_SET_VERIFY_ON_WRITE		EQU	2EH
   120                              <1> DOS_GET_DMA			EQU	2FH
   121                              <1> DOS_GET_VERSION			EQU	30H
   122                              <1> DOS_KEEP_PROCESS		EQU	31H
   123                              <1> DOS_GET_DPB			EQU	32H
   124                              <1> DOS_SET_CTRL_C_TRAPPING		EQU	33H
   125                              <1> DOS_GET_INDOS_FLAG		EQU	34H
   126                              <1> DOS_GET_INTERRUPT_VECTOR	EQU	35H
   127                              <1> DOS_GET_DRIVE_FREESPACE		EQU	36H
   128                              <1> DOS_CHAR_OPER			EQU	37H
   129                              <1> DOS_INTERNATIONAL_SUPPORT	EQU	38H
   130                              <1> DOS_MKDIR			EQU	39H
   131                              <1> DOS_RMDIR			EQU	3AH
   132                              <1> DOS_CHDIR			EQU	3BH
   133                              <1> DOS_CREAT			EQU	3CH
   134                              <1> DOS_OPEN			EQU	3DH
   135                              <1> DOS_CLOSE			EQU	3EH
   136                              <1> DOS_READ			EQU	3FH
   137                              <1> DOS_WRITE			EQU	40H
   138                              <1> DOS_UNLINK			EQU	41H
   139                              <1> DOS_LSEEK			EQU	42H
   140                              <1> DOS_CHMOD			EQU	43H
   141                              <1> DOS_IOCTL			EQU	44H
   142                              <1> DOS_XDUP			EQU	45H
   143                              <1> DOS_XDUP2			EQU	46H
   144                              <1> DOS_GETDIR			EQU	47H
   145                              <1> DOS_ALLOC			EQU	48H
   146                              <1> DOS_DEALLOC			EQU	49H
   147                              <1> DOS_SETBLOCK			EQU	4AH
   148                              <1> DOS_EXEC			EQU	4BH
   149                              <1> DOS_EXIT			EQU	4CH
   150                              <1> DOS_WAIT			EQU	4DH
   151                              <1> DOS_FIND_FIRST			EQU	4EH
   152                              <1> DOS_FIND_NEXT			EQU	4FH
   153                              <1> DOS_SET_CURRENT_PDB		EQU	50H
   154                              <1> DOS_GET_CURRENT_PDB		EQU	51H
   155                              <1> DOS_GET_SYSINIT_VARS		EQU	52H
   156                              <1> DOS_SET_DPB			EQU	53H
   157                              <1> DOS_GET_VERIFY_ON_WRITE		EQU	54H
   158                              <1> DOS_DUP_PDB			EQU	55H
   159                              <1> DOS_RENAME			EQU	56H
   160                              <1> DOS_FILE_TIMES			EQU	57H
   161                              <1> DOS_RESERVED58			EQU	58H
   162                              <1> DOS_GET_EXTENDED_ERROR		EQU	59H
   163                              <1> DOS_CREATE_TEMP_FILE		EQU	5AH
   164                              <1> DOS_CREATE_NEW_FILE		EQU	5BH
   165                              <1> DOS_LOCK_OPER			EQU	5CH
   166                              <1> DOS_SERVER_CALL			EQU	5DH
   167                              <1> DOS_USER_OPER			EQU	5EH
   168                              <1> DOS_ASSIGN_OPER			EQU	5FH
   169                              <1> DOS_XNAMETRANS			EQU	60H
   170                              <1> DOS_JSA				EQU	61H
   171                              <1> DOS_GET_CURRENT_PSP		EQU	62H
   172                              <1> DOS_HONGEUL			EQU	63H
   173                              <1> DOS_SYSINITSLEAZE		EQU	64H
   174                              <1> DOSERR_NONE			EQU	00H
   175                              <1> DOSERR_BADFUNCTION		EQU	01H
   176                              <1> DOSERR_NOFILE			EQU	02H
   177                              <1> DOSERR_NOPATH			EQU	03H
   178                              <1> DOSERR_NOHANDLES		EQU	04H
   179                              <1> DOSERR_NOACCESS			EQU	05H
   180                              <1> DOSERR_BADHANDLE		EQU	06H
   181                              <1> DOSERR_BADARENA			EQU	07H
   182                              <1> DOSERR_NOMEMORY			EQU	08H
   183                              <1> DOSERR_BADADDRESS		EQU	09H
   184                              <1> DOSERR_BADENVIRONMENT		EQU	0AH
   185                              <1> DOSERR_BADFORMAT		EQU	0BH
   186                              <1> DOSERR_BADACCESS		EQU	0CH
   187                              <1> DOSERR_BADDATA			EQU	0DH
   188                              <1> DOSERR_BADUNIT			EQU	0EH
   189                              <1> DOSERR_BADDISK			EQU	0FH
   190                              <1> DOSERR_DELETECURDIR		EQU	10H
   191                              <1> DOSERR_NOTSAMEDEVICE		EQU	11H
   192                              <1> DOSERR_NOMOREFILES		EQU	12H
   193                              <1> DOSERR_WRITEPROTECT		EQU	13H
   194                              <1> DOSERR_UNKNOWNUNIT		EQU	14H
   195                              <1> DOSERR_DRIVENOTREADY		EQU	15H
   196                              <1> DOSERR_BADCOMMAND		EQU	16H
   197                              <1> DOSERR_DATA			EQU	17H
   198                              <1> DOSERR_BADREQUEST		EQU	18H
   199                              <1> DOSERR_SEEK			EQU	19H
   200                              <1> DOSERR_UNKNOWNMEDIA		EQU	1AH
   201                              <1> DOSERR_BADSECTOR		EQU	1BH
   202                              <1> DOSERR_NOPAPER			EQU	1CH
   203                              <1> DOSERR_WRITEFAULT		EQU	1DH
   204                              <1> DOSERR_READFAULT		EQU	1EH
   205                              <1> DOSERR_GENERALFAILURE		EQU	1FH
   206                              <1> DOSERR_NOTSHARED		EQU	20H
   207                              <1> DOSERR_LOCKED			EQU	21H
   208                              <1> DOSERR_DISKCHANGE		EQU	22H
   209                              <1> SEEK_SET			EQU	00H
   210                              <1> SEEK_CUR			EQU	01H
   211                              <1> SEEK_END			EQU	02H
   212                                  	%include "misc.inc"
   213                              <1> CR	equ	0x0d
   214                              <1> LF	equ	0x0a
   215                              <1>
   216                              <1> ;
   217                              <1> ; The "set" macro initializes a register to the specified value (eg, "set eax,0")
   218                              <1> ;
   219                              <1> %macro	set	2
   220                              <1>     %ifnum %2
   221                              <1>       %if %2 = 0
   222                              <1> 	xor	%1,%1
   223                              <1>       %else
   224                              <1>     	mov	%1,%2
   225                              <1>       %endif
   226                              <1>     %else
   227                              <1>     	mov	%1,%2
   228                              <1>     %endif
   229                              <1> %endmacro
   230                                  	%include "x86.inc"
   231                              <1> ;
   232                              <1> ; X86.DESC defines (see x86.js)
   233                              <1> ;
   234                              <1> PS_CF			equ	0x0001
   235                              <1> PS_PF			equ	0x0004
   236                              <1> PS_AF			equ	0x0010
   237                              <1> PS_ZF			equ	0x0040
   238                              <1> PS_SF			equ	0x0080
   239                              <1> PS_TF			equ	0x0100
   240                              <1> PS_IF			equ	0x0200
   241                              <1> PS_DF			equ	0x0400
   242                              <1> PS_OF			equ	0x0800
   243                              <1> PS_ARITH		equ	(PS_CF | PS_PF | PS_AF | PS_ZF | PS_SF | PS_OF)
   244                              <1> PS_LOGIC		equ	(PS_CF | PS_PF | PS_ZF | PS_SF | PS_OF)
   245                              <1> PS_MULTIPLY		equ	(PS_CF | PS_OF)	; only CF and OF are "defined" following MUL or IMUL
   246                              <1> PS_DIVIDE		equ	0		; none of the Processor Status flags are "defined" following DIV or IDIV
   247                              <1>
   248                              <1> CR0_MSW_PE		equ	0x0001
   249                              <1> CR0_PG			equ	0x80000000	; set if paging enabled
   250                              <1>
   251                              <1> ACC_TYPE_GATE386_INT	equ	0x0E00
   252                              <1> ACC_TYPE_SEG		equ	0x1000
   253                              <1> ACC_PRESENT		equ	0x8000
   254                              <1> ACC_TYPE_CODE		equ	0x0800
   255                              <1> ACC_TYPE_READABLE	equ	0x0200
   256                              <1> ACC_TYPE_WRITABLE	equ	0x0200
   257                              <1> ACC_TYPE_CODE_READABLE	equ	0x1a00
   258                              <1> ACC_TYPE_DATA_WRITABLE	equ	0x1200
   259                              <1>
   260                              <1>
   261                              <1> EXT_NONE		equ	0x0000
   262                              <1> EXT_BIG			equ	0x0040
   263                              <1>
   264                              <1> PTE_FRAME		equ	0xfffff000
   265                              <1> PTE_DIRTY		equ	0x00000040	; page has been modified
   266                              <1> PTE_ACCESSED		equ	0x00000020      ; page has been accessed
   267                              <1> PTE_USER		equ	0x00000004	; set for user level (CPL 3), clear for supervisor level (CPL 0-2)
   268                              <1> PTE_READWRITE		equ	0x00000002	; set for read/write, clear for read-only (affects CPL 3 only)
   269                              <1> PTE_PRESENT		equ	0x00000001   	; set for present page, clear for not-present page
   270
   271                                  	bits	16
   272
   273                                  PAGING equ 1
   274
   275                                  ;
   276                                  ;   If we built our data structures in RAM, we might use the first page of RAM (0x0000-0x0fff) like so:
   277                                  ;
   278                                  ;	0x0000-0x03ff	Real-mode IDT (256*4)
   279                                  ;	0x0400-0x0bff	Prot-mode IDT (256*8)
   280                                  ;	0x0c00-0x0cff	RAM_GDT (for 32 GDT selectors)
   281                                  ;	0x0d00-0x0d07	RAM_IDTR
   282                                  ;	0x0d08-0x0d0f	RAM_GDTR
   283                                  ;	0x0d10-0x0d13	RAM_RETF (Real-mode return address)
   284                                  ;	0x0d14-0x0fff	reserved
   285                                  ;
   286                                  ;   And in the second page (0x1000-0x1fff), we might build a page directory, followed by a single page table
   287                                  ;   that allows us to map up to 4Mb (although we'd likely only create PTEs for the first 1Mb).
   288                                  ;
   289                                  ;   However, the code to do that is currently disabled (see %ifdef RAM_GDT), because it's just as easy to define
   290                                  ;   the structures we need inside the .COM image and statically initialize them to the values assumed for ROM
   291                                  ;   operation.  For RAM operation, we tweak the structures as needed; the tweaks have no effect when loaded in ROM.
   292                                  ;
   293                                  ;RAM_GDT	equ	0x0c00
   294                                  ;RAM_IDTR	equ	0x0d00
   295                                  ;RAM_GDTR	equ	0x0d08
   296                                  ;RAM_RETF	equ	0x0d10
   297                                  ;
   298
   299                                  CSEG_REAL	equ	0xf000
   300                                  CSEG_PROT16	equ	0x0008
   301                                  CSEG_PROT32	equ	0x0010
   302                                  DSEG_PROT16	equ	0x0018
   303                                  DSEG_PROT32	equ	0x0020
   304                                  SSEG_PROT32	equ	0x0028
   305
   306                                  ;
   307                                  ;   We set our exception handlers at fixed addresses to simplify interrupt gate descriptor initialization.
   308                                  ;
   309                                  OFF_INTDIVERR	equ	0xe000
   310
   311                                  ;
   312                                  ;   The "defGate" macro defines an interrupt gate, given a selector (%1) and an offset (%2)
   313                                  ;
   314                                  %macro	defGate	2
   315                                  	dw	(%2 & 0xffff)
   316                                  	dw	%1
   317                                  	dw	ACC_TYPE_GATE386_INT | ACC_PRESENT
   318                                  	dw	(%2 >> 16) & 0xffff
   319                                  %endmacro
   320
   321                                  ;
   322                                  ;   The "defDesc" macro defines a descriptor, given a name (%1), base (%2), limit (%3), type (%4), and ext (%5)
   323                                  ;
   324                                  %assign	selDesc	0
   325
   326                                  %macro	defDesc	1-5 0,0,0,0
   327                                  	%assign %1 selDesc
   328                                  	dw	(%3 & 0x0000ffff)
   329                                  	dw	(%2 & 0x0000ffff)
   330                                      %if selDesc = 0
   331                                  	dw	((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13)
   332                                      %else
   333                                  	dw	((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13) | ACC_PRESENT
   334                                      %endif
   335                                  	dw	((%3 & 0x000f0000) >> 16) | %5 | ((%2 & 0xff000000) >> 16)
   336                                  	%assign selDesc selDesc+8
   337                                  %endmacro
   338
   339                                  ;
   340                                  ;   The "setDesc" macro creates a descriptor, given a name (%1), base (%2), limit (%3), type (%4), and ext (%5)
   341                                  ;
   342                                  %macro	setDesc 1-5 0,0,0,0
   343                                  	%assign %1 selDesc
   344                                  	set	ebx,%2
   345                                  	set	ecx,%3
   346                                  	set	dx,%4
   347                                  	set	ax,%5
   348                                  	call	storeDesc
   349                                  	%assign selDesc selDesc+8
   350                                  %endmacro
   351
   352 00000000 90                      start:	nop
   353                                  ;
   354                                  ;   If we didn't CALL or PUSH anything on the stack AND we turned interrupts off, the top of our image would be
   355                                  ;   safe, but if we're running in RAM, we do issue a few DOS calls before switching into protected-mode and onto
   356                                  ;   a new stack, so we need to set SP to a safer location inside the .COM image.
   357                                  ;
   358 00000001 BC[3A80]                	mov	sp,tempStack
   359                                  ;
   360                                  ;   Quick tests of unsigned 32-bit multiplication and division
   361                                  ;
   362 00000004 66B801000080            	mov	eax,0x80000001
   363 0000000A 66F7E8                  	imul	eax
   364
   365 0000000D 66B811223344            	mov	eax,0x44332211
   366 00000013 6689C3                  	mov	ebx,eax
   367 00000016 66B955667788            	mov	ecx,0x88776655
   368 0000001C 66F7E1                  	mul	ecx
   369 0000001F 66F7F1                  	div	ecx
   370 00000022 6639D8                  	cmp	eax,ebx
   371 00000025 0F855F8A                	jne	near error		; apparently we have to tell NASM v0.98.40 "near" for all long forward references
   372
   373 00000029 31D2                    	xor	dx,dx
   374 0000002B 8EDA                    	mov	ds,dx			; DS -> 0x0000
   375                                  ;
   376                                  ;   Quick test of moving a segment register to a 32-bit register
   377                                  ;
   378 0000002D 668CD8                  	mov	eax,ds
   379 00000030 6685C0                  	test	eax,eax
   380 00000033 0F85518A                	jnz	near error
   381
   382 00000037 E96C80                  	jmp	initGDT
   383 0000003A 90<rept>                	times	32768 nop		; lots of NOPs to test generation of 16-bit conditional jumps
   384                                  tempStack:
   385                                  ;
   386                                  ;   storeDesc(EBX=base, ECX=limit, DX=type, AX=ext, DI=address of descriptor)
   387                                  ;
   388                                  storeDesc:
   389 0000803A FC                      	cld
   390 0000803B 50                      	push	ax
   391 0000803C 89C8                    	mov	ax,cx
   392 0000803E AB                      	stosw				; store the low 16 bits of limit from ECX
   393 0000803F 89D8                    	mov	ax,bx
   394 00008041 AB                      	stosw				; store the low 16 bits of base from EBX
   395 00008042 89D0                    	mov	ax,dx
   396 00008044 66C1EB10                	shr	ebx,16
   397 00008048 88D8                    	mov	al,bl
   398 0000804A 0D0080                  	or	ax,ACC_PRESENT
   399 0000804D AB                      	stosw
   400 0000804E 58                      	pop	ax
   401 0000804F 66C1E910                	shr	ecx,16
   402 00008053 80E10F                  	and	cl,0xf
   403 00008056 08C8                    	or	al,cl
   404 00008058 88FC                    	mov	ah,bh
   405 0000805A AB                      	stosw
   406 0000805B C3                      	ret
   407
   408 0000805C 2F00                    addrGDT:dw	myGDTEnd - myGDT - 1	; 16-bit limit of myGDT
   409 0000805E [6280]0F00              	dw	myGDT, 0x000f		; 32-bit base address of myGDT
   410
   411                                  myGDT:	defDesc	NULL			; the first descriptor in any descriptor table is always a dud (it corresponds to the null selector)
   412                              <1> myGDT:
   413                              <1>  %assign %1 selDesc
   414 00008062 0000                <1>  dw (%3 & 0x0000ffff)
   415 00008064 0000                <1>  dw (%2 & 0x0000ffff)
   416                              <1>  %if selDesc = 0
   417 00008066 0000                <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13)
   418                              <1>  %else
   419                              <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13) | ACC_PRESENT
   420                              <1>  %endif
   421 00008068 0000                <1>  dw ((%3 & 0x000f0000) >> 16) | %5 | ((%2 & 0xff000000) >> 16)
   422                              <1>  %assign selDesc selDesc+8
   423                                  	defDesc	CSEG_PROT16,0x000f0000,0x0000ffff,ACC_TYPE_CODE_READABLE,EXT_NONE
   424                              <1>  %assign %1 selDesc
   425 0000806A FFFF                <1>  dw (%3 & 0x0000ffff)
   426 0000806C 0000                <1>  dw (%2 & 0x0000ffff)
   427                              <1>  %if selDesc = 0
   428                              <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13)
   429                              <1>  %else
   430 0000806E 0F9A                <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13) | ACC_PRESENT
   431                              <1>  %endif
   432 00008070 0000                <1>  dw ((%3 & 0x000f0000) >> 16) | %5 | ((%2 & 0xff000000) >> 16)
   433                              <1>  %assign selDesc selDesc+8
   434                                  	defDesc	CSEG_PROT32,0x000f0000,0x0000ffff,ACC_TYPE_CODE_READABLE,EXT_BIG
   435                              <1>  %assign %1 selDesc
   436 00008072 FFFF                <1>  dw (%3 & 0x0000ffff)
   437 00008074 0000                <1>  dw (%2 & 0x0000ffff)
   438                              <1>  %if selDesc = 0
   439                              <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13)
   440                              <1>  %else
   441 00008076 0F9A                <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13) | ACC_PRESENT
   442                              <1>  %endif
   443 00008078 4000                <1>  dw ((%3 & 0x000f0000) >> 16) | %5 | ((%2 & 0xff000000) >> 16)
   444                              <1>  %assign selDesc selDesc+8
   445                                  	defDesc	DSEG_PROT16,0x00000000,0x000fffff,ACC_TYPE_DATA_WRITABLE,EXT_NONE
   446                              <1>  %assign %1 selDesc
   447 0000807A FFFF                <1>  dw (%3 & 0x0000ffff)
   448 0000807C 0000                <1>  dw (%2 & 0x0000ffff)
   449                              <1>  %if selDesc = 0
   450                              <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13)
   451                              <1>  %else
   452 0000807E 0092                <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13) | ACC_PRESENT
   453                              <1>  %endif
   454 00008080 0F00                <1>  dw ((%3 & 0x000f0000) >> 16) | %5 | ((%2 & 0xff000000) >> 16)
   455                              <1>  %assign selDesc selDesc+8
   456                                  	defDesc	DSEG_PROT32,0x00000000,0x000fffff,ACC_TYPE_DATA_WRITABLE,EXT_BIG
   457                              <1>  %assign %1 selDesc
   458 00008082 FFFF                <1>  dw (%3 & 0x0000ffff)
   459 00008084 0000                <1>  dw (%2 & 0x0000ffff)
   460                              <1>  %if selDesc = 0
   461                              <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13)
   462                              <1>  %else
   463 00008086 0092                <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13) | ACC_PRESENT
   464                              <1>  %endif
   465 00008088 4F00                <1>  dw ((%3 & 0x000f0000) >> 16) | %5 | ((%2 & 0xff000000) >> 16)
   466                              <1>  %assign selDesc selDesc+8
   467                                  	defDesc	SSEG_PROT32,0x00010000,0x000effff,ACC_TYPE_DATA_WRITABLE,EXT_BIG
   468                              <1>  %assign %1 selDesc
   469 0000808A FFFF                <1>  dw (%3 & 0x0000ffff)
   470 0000808C 0000                <1>  dw (%2 & 0x0000ffff)
   471                              <1>  %if selDesc = 0
   472                              <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13)
   473                              <1>  %else
   474 0000808E 0192                <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13) | ACC_PRESENT
   475                              <1>  %endif
   476 00008090 4E00                <1>  dw ((%3 & 0x000f0000) >> 16) | %5 | ((%2 & 0xff000000) >> 16)
   477                              <1>  %assign selDesc selDesc+8
   478                                  myGDTEnd:
   479
   480 00008092 0700                    addrIDT:dw	myIDTEnd - myIDT - 1	; 16-bit limit of myIDT
   481 00008094 [9880]0F00              	dw	myIDT, 0x000f		; 32-bit base address of myIDT
   482
   483                                  myIDT:	defGate	CSEG_PROT32,OFF_INTDIVERR
   484                              <1> myIDT:
   485 00008098 00E0                <1>  dw (%2 & 0xffff)
   486 0000809A 1000                <1>  dw %1
   487 0000809C 008E                <1>  dw ACC_TYPE_GATE386_INT | ACC_PRESENT
   488 0000809E 0000                <1>  dw (%2 >> 16) & 0xffff
   489                                  myIDTEnd:
   490
   491                                  addrIDTReal:
   492 000080A0 FF03                    	dw	0x3FF			; 16-bit limit of real-mode IDT
   493 000080A2 00000000                	dd	0x00000000		; 32-bit base address of real-mode IDT
   494
   495                                  initGDT:
   496                                      %ifdef RAM_GDT
   497                                  	set	edi,RAM_GDT
   498                                  	mov	[RAM_GDTR+2],edi
   499                                  	setDesc	NULL
   500                                  	xor	eax,eax
   501                                  	mov	ax,cs
   502                                  	shl	eax,4
   503                                  	setDesc	CSEG_PROT16,eax,0x0000ffff,ACC_TYPE_CODE_READABLE,EXT_NONE
   504                                  	setDesc	CSEG_PROT32,eax,0x0000ffff,ACC_TYPE_CODE_READABLE,EXT_BIG
   505                                  	setDesc	DSEG_PROT16,0x00000000,0x000fffff,ACC_TYPE_DATA_WRITABLE,EXT_NONE
   506                                  	setDesc	DSEG_PROT32,0x00000000,0x000fffff,ACC_TYPE_DATA_WRITABLE,EXT_BIG
   507                                  	setDesc	SSEG_PROT32,0x00010000,0x000effff,ACC_TYPE_DATA_WRITABLE,EXT_BIG
   508                                  	sub	edi,RAM_GDT
   509                                  	dec	edi
   510                                  	mov	[RAM_GDTR],di
   511                                  	mov	word [RAM_RETF],toReal
   512                                  	mov	word [RAM_RETF+2],cs
   513                                      %else
   514                                  ;
   515                                  ;   This code fixes the GDT and all our far jumps if we're running in RAM
   516                                  ;
   517 000080A6 6631C0                      	xor	eax,eax
   518 000080A9 8CC8                    	mov	ax,cs
   519 000080AB 66C1E004                	shl	eax,4				; EAX == base address of the current CS
   520 000080AF 6689C2                  	mov	edx,eax				; save it in EDX
   521 000080B2 2EA3[6C80]              	mov	[cs:myGDT+CSEG_PROT16+2],ax	; update the base portions of the descriptor for CSEG_PROT16 and CSEG_PROT32
   522 000080B6 2EA3[7480]              	mov	[cs:myGDT+CSEG_PROT32+2],ax
   523 000080BA 66C1E810                	shr	eax,16
   524 000080BE 2EA2[6E80]              	mov	[cs:myGDT+CSEG_PROT16+4],al
   525 000080C2 2EA2[7680]              	mov	[cs:myGDT+CSEG_PROT32+4],al
   526 000080C6 2E8826[7180]            	mov	[cs:myGDT+CSEG_PROT16+7],ah
   527 000080CB 2E8826[7980]            	mov	[cs:myGDT+CSEG_PROT32+7],ah
   528 000080D0 6689D0                  	mov	eax,edx				; recover the base address of the current CS
   529 000080D3 6605[62800000]          	add	eax,myGDT			; EAX == physical address of myGDT
   530 000080D9 2E66A3[5E80]            	mov	[cs:addrGDT+2],eax		; update the 32-bit base address of myGDT in addrGDT
   531 000080DE 6689D0                  	mov	eax,edx				; recover the base address of the current CS again
   532 000080E1 6605[98800000]          	add	eax,myIDT			; EAX == physical address of myIDT
   533 000080E7 2E66A3[9480]            	mov	[cs:addrIDT+2],eax		; update the 32-bit base address of myIDT in addrIDT
   534 000080EC 8CC8                    	mov	ax,cs
   535                                        %ifdef REAL32
   536                                  	mov	[cs:jmpReal+5],ax		; update the segment of the FAR jump that returns us to real-mode
   537                                        %else
   538 000080EE 2EA3[3FDF]              	mov	[cs:jmpReal+3],ax
   539                                        %endif
   540 000080F2 2EA3[F3FE]              	mov	[cs:jmpStart+3],ax		; ditto for the FAR jump that returns us to the start of the image
   541                                      %endif
   542                                  ;
   543                                  ;   Now we want to build a page directory and a page table, but we need two pages of
   544                                  ;   4K-aligned physical memory.  We can use a hard-coded address (segment 0x100, corresponding
   545                                  ;   to physical address 0x1000) if we're running in ROM; otherwise, we ask DOS for some memory.
   546                                  ;
   547 000080F6 3D00F0                      	cmp	ax,CSEG_REAL
   548 000080F9 B80001                      	mov	ax,0x100			; default to the 2nd physical page in low memory
   549 000080FC 7431                        	je	initPages
   550
   551 000080FE BB0010                      	mov	bx,0x1000			; 4K paragraphs == 64K bytes
   552 00008101 B44A                        	mov	ah,DOS_SETBLOCK			; resize the current block so we can allocate a new block
   553 00008103 CD21                        	int	INT_DOS
   554 00008105 731F                        	jnc	allocPages
   555
   556                                  exitErrDOSMem:
   557 00008107 BA[1081]                    	mov	dx,errDOSMem
   558
   559                                  exitErrDOS:
   560 0000810A B409                    	mov	ah,DOS_STD_CON_STRING_OUTPUT
   561 0000810C CD21                    	int	INT_DOS
   562 0000810E CD20                    	int	INT_DOSEXIT
   563
   564                                  errDOSMem:
   565 00008110 496E73756666696369-     	db     "Insufficient memory",CR,LF,'$'
   566 00008119 656E74206D656D6F72-
   567 00008122 790D0A24
   568
   569                                  allocPages:
   570 00008126 BB0020                  	mov	bx,0x2000			; 8K paragraphs == 128K bytes
   571 00008129 B448                    	mov	ah,DOS_ALLOC
   572 0000812B CD21                    	int	INT_DOS
   573 0000812D 72E1                    	jc	errDOSMem
   574                                  ;
   575                                  ;   AX == segment of 64K memory block
   576                                  ;
   577                                  initPages:
   578 0000812F 660FB7C0                    	movzx	eax,ax
   579 00008133 66C1E004                    	shl	eax,4
   580 00008137 6605FF0F0000                	add	eax,0xfff
   581 0000813D 662500F0FFFF                	and	eax,~0xfff
   582 00008143 6689C6                  	mov	esi,eax				; ESI == first physical 4K-aligned page within the given segment
   583 00008146 66C1E804                    	shr	eax,4
   584 0000814A 8EC0                        	mov	es,ax
   585 0000814C 6631FF                      	xor	edi,edi
   586                                  ;
   587                                  ;   Build a page directory at ES:EDI with only 1 valid PDE (the first one),
   588                                  ;   because we're not going to access any memory outside the first 1Mb (of the first 4Mb).
   589                                  ;
   590 0000814F FC                      	cld
   591 00008150 6689F0                  	mov	eax,esi
   592 00008153 660500100000            	add	eax,0x1000			; EAX == page frame address (of the next page)
   593 00008159 660D07000000            	or	eax,PTE_USER | PTE_READWRITE | PTE_PRESENT
   594 0000815F 66AB                    	stosd
   595 00008161 66B9FF030000                	mov	ecx,1024-1			; ECX == number of (remaining) PDEs to write
   596 00008167 6629C0                      	sub	eax,eax
   597 0000816A F366AB                  	rep	stosd
   598                                  ;
   599                                  ;   Build a page table at EDI with 256 (out of 1024) valid PTEs, mapping the first 1Mb of the
   600                                  ;   first 4Mb as linear == physical.
   601                                  ;
   602 0000816D 66B807000000            	mov	eax,PTE_USER | PTE_READWRITE | PTE_PRESENT
   603 00008173 66B900010000                	mov	ecx,256				; ECX == number of PTEs to write
   604 00008179 66AB                    initPT:	stosd
   605 0000817B 660500100000            	add	eax,0x1000
   606 00008181 E2F6                    	loop	initPT
   607 00008183 66B900030000                	mov	ecx,1024-256			; ECX == number of (remaining) PTEs to write
   608 00008189 6629C0                      	sub	eax,eax
   609 0000818C F366AB                      	rep	stosd
   610
   611                                  goProt:
   612 0000818F FA                      	cli					; make sure interrupts are off now, since we've not initialized the IDT yet
   613 00008190 662E0F011E[9280]        	o32 lidt [cs:addrIDT]
   614 00008197 662E0F0116[5C80]        	o32 lgdt [cs:addrGDT]
   615 0000819E 0F22DE                  	mov	cr3,esi
   616 000081A1 0F20C0                  	mov	eax,cr0
   617                                      %if PAGING
   618 000081A4 660D01000080            	or	eax,CR0_MSW_PE | CR0_PG
   619                                      %else
   620                                  	or	eax,CR0_MSW_PE
   621                                      %endif
   622 000081AA 0F22C0                  	mov	cr0,eax
   623 000081AD EA[B281]1000            	jmp	CSEG_PROT32:toProt32
   624
   625                                  toProt32:
   626                                  	bits	32
   627
   628 000081B2 66B81800                	mov	ax,DSEG_PROT16
   629 000081B6 8ED8                    	mov	ds,ax
   630 000081B8 8EC0                    	mov	es,ax
   631                                  ;
   632                                  ;   Of the 128Kb of scratch memory we allocated, we may have lost as much as 4Kb-1 rounding
   633                                  ;   up to the first physical 4Kb page; the next 8Kb (0x2000) was used for a page directory and a
   634                                  ;   single page table, leaving us with a minimum of 116Kb to play with, starting at ESI+0x2000.
   635                                  ;
   636                                  ;   We'll set the top of our stack to ESI+0xe000.  This guarantees an ESP greater than 0xffff,
   637                                  ;   and so for the next few tests, with a 16-bit data segment in SS, we expect all pushes/pops
   638                                  ;   will occur at SP rather than ESP.
   639                                  ;
   640 000081BA 81C600200000            	add	esi,0x2000			; ESI -> bottom of scratch memory
   641 000081C0 8ED0                    	mov	ss,ax
   642 000081C2 8DA600E00000            	lea	esp,[esi+0xe000]		; set ESP to bottom of scratch + 56K
   643 000081C8 8D6C24FC                	lea	ebp,[esp-4]
   644 000081CC 81E5FFFF0000            	and	ebp,0xffff			; EBP now mirrors SP instead of ESP
   645 000081D2 8B5500                  	mov	edx,[ebp]			; save dword about to be trashed by pushes
   646 000081D5 B844332211              	mov	eax,0x11223344
   647 000081DA 50                      	push	eax
   648 000081DB 394500                  	cmp	[ebp],eax			; did the push use SP instead of ESP?
   649 000081DE 0F85A4080000            	jne	near error			; no, error
   650 000081E4 58                      	pop	eax
   651 000081E5 6650                    	push	ax
   652 000081E7 66394502                	cmp	[ebp+2],ax
   653 000081EB 0F8597080000            	jne	near error
   654 000081F1 6658                    	pop	ax
   655 000081F3 895500                  	mov	[ebp],edx			; restore dword trashed by the above pushes
   656 000081F6 66B82000                	mov	ax,DSEG_PROT32
   657 000081FA 8ED0                    	mov	ss,ax
   658 000081FC 8DA600E00000            	lea	esp,[esi+0xe000]		; SS:ESP should now be a valid 32-bit pointer
   659 00008202 8D6C24FC                	lea	ebp,[esp-4]
   660 00008206 8B5500                  	mov	edx,[ebp]
   661 00008209 B844332211              	mov	eax,0x11223344
   662 0000820E 50                      	push	eax
   663 0000820F 394500                  	cmp	[ebp],eax			; did the push use ESP instead of SP?
   664 00008212 0F8570080000            	jne	near error			; no, error
   665 00008218 58                      	pop	eax
   666 00008219 6650                    	push	ax
   667 0000821B 66394502                	cmp	[ebp+2],ax
   668 0000821F 0F8563080000            	jne	near error
   669 00008225 6658                    	pop	ax
   670                                  ;
   671                                  ;   Test moving a segment register to a 32-bit memory location
   672                                  ;
   673 00008227 8B1500000000            	mov	edx,[0x0000]			; save the DWORD at 0x0000:0x0000 in EDX
   674 0000822D 0DFFFFFFFF              	or	eax,-1
   675 00008232 A300000000              	mov	[0x0000],eax
   676 00008237 8C1D00000000            	mov	[0x0000],ds
   677 0000823D 668CD8                  	mov	ax,ds
   678 00008240 3B0500000000            	cmp	eax,[0x0000]
   679 00008246 0F853C080000            	jne	near error
   680 0000824C 8CD8                    	mov	eax,ds
   681 0000824E 350000FFFF              	xor	eax,0xffff0000
   682 00008253 3B0500000000            	cmp	eax,[0x0000]
   683 00008259 0F8529080000            	jne	near error
   684 0000825F 891500000000            	mov	[0x0000],edx			; restore the DWORD at 0x0000:0x0000 from EDX
   685                                  ;
   686                                  ;   Test moving a byte to a 32-bit register with sign-extension
   687                                  ;
   688 00008265 2E0FBE05[F6FE0000]      	movsx	eax,byte [cs:signedByte]
   689 0000826D 3D80FFFFFF              	cmp	eax,0xffffff80
   690 00008272 0F8510080000            	jne	near error
   691                                  ;
   692                                  ;   Test moving a word to a 32-bit register with sign-extension
   693                                  ;
   694 00008278 2E0FBF05[F5FE0000]      	movsx	eax,word [cs:signedWord]
   695 00008280 3D8080FFFF              	cmp	eax,0xffff8080
   696 00008285 0F85FD070000            	jne	near error
   697                                  ;
   698                                  ;   Test moving a byte to a 32-bit register with zero-extension
   699                                  ;
   700 0000828B 2E0FB605[F6FE0000]      	movzx	eax,byte [cs:signedByte]
   701 00008293 3D80000000              	cmp	eax,0x00000080
   702 00008298 0F85EA070000            	jne	near error
   703                                  ;
   704                                  ;   Test moving a word to a 32-bit register with zero-extension
   705                                  ;
   706 0000829E 2E0FB705[F5FE0000]      	movzx	eax,word [cs:signedWord]
   707 000082A6 3D80800000              	cmp	eax,0x00008080
   708 000082AB 0F85D7070000            	jne	near error
   709                                  ;
   710                                  ;   More assorted zero and sign-extension tests
   711                                  ;
   712 000082B1 BC00000400                  	mov	esp,0x40000
   713 000082B6 8B1424                      	mov	edx,[esp]			; save word at scratch address 0x40000
   714 000082B9 81C404000000                	add	esp,4
   715 000082BF 6A80                        	push	byte -128			; NASM will not use opcode 0x6A ("PUSH imm8") unless we specify "byte"
   716 000082C1 5B                          	pop	ebx				; verify EBX == 0xFFFFFF80
   717 000082C2 81FB80FFFFFF                	cmp	ebx,0xFFFFFF80
   718 000082C8 0F85BA070000                	jne	near error
   719 000082CE 81E3FF000000                	and	ebx,0xff			; verify EBX == 0x00000080
   720 000082D4 81FB80000000                	cmp	ebx,0x00000080
   721 000082DA 0F85A8070000                	jne	near error
   722 000082E0 660FBEDB                    	movsx	bx,bl				; verify EBX == 0x0000FF80
   723 000082E4 81FB80FF0000                	cmp	ebx,0x0000FF80
   724 000082EA 0F8598070000                	jne	near error
   725 000082F0 0FBFDB                      	movsx	ebx,bx				; verify EBX == 0xFFFFFF80
   726 000082F3 81FB80FFFFFF                	cmp	ebx,0xFFFFFF80
   727 000082F9 0F8589070000                	jne	near error
   728 000082FF 660FB6DB                    	movzx	bx,bl				; verify EBX == 0xFFFF0080
   729 00008303 81FB8000FFFF                	cmp	ebx,0xFFFF0080
   730 00008309 0F8579070000                	jne	near error
   731 0000830F 0FB6DB                      	movzx	ebx,bl				; verify EBX == 0x00000080
   732 00008312 81FB80000000                	cmp	ebx,0x00000080
   733 00008318 0F856A070000                	jne	near error
   734 0000831E F7D3                        	not	ebx				; verify EBX == 0xFFFFFF7F
   735 00008320 81FB7FFFFFFF                	cmp	ebx,0xFFFFFF7F
   736 00008326 0F855C070000                	jne	near error
   737 0000832C 660FBEDB                    	movsx	bx,bl				; verify EBX == 0xFFFF007F
   738 00008330 81FB7F00FFFF                	cmp	ebx,0xFFFF007F
   739 00008336 0F854C070000                	jne	near error
   740 0000833C 0FBEDB                      	movsx	ebx,bl				; verify EBX == 0x0000007F
   741 0000833F 81FB7F000000                	cmp	ebx,0x0000007F
   742 00008345 0F853D070000                	jne	near error
   743 0000834B F7D3                        	not	ebx				; verify EBX == 0xFFFFFF80
   744 0000834D 81FB80FFFFFF                	cmp	ebx,0xFFFFFF80
   745 00008353 0F852F070000                	jne	near error
   746 00008359 0FB7DB                      	movzx	ebx,bx				; verify EBX == 0x0000FF80
   747 0000835C 81FB80FF0000                	cmp	ebx,0x0000FF80
   748 00008362 0F8520070000                	jne	near error
   749 00008368 660FB6DB                    	movzx	bx,bl				; verify EBX == 0x00000080
   750 0000836C 81FB80000000                	cmp	ebx,0x00000080
   751 00008372 0F8510070000                	jne	near error
   752 00008378 660FBEDB                    	movsx	bx,bl
   753 0000837C 66F7DB                      	neg	bx
   754 0000837F 66F7DB                      	neg	bx
   755 00008382 81FB80FF0000                	cmp	ebx,0x0000FF80
   756 00008388 0F85FA060000                	jne	near error
   757 0000838E 0FBFDB                      	movsx	ebx,bx
   758 00008391 F7DB                        	neg	ebx
   759 00008393 F7DB                        	neg	ebx
   760 00008395 81FB80FFFFFF                	cmp	ebx,0xFFFFFF80
   761 0000839B 0F85E7060000                	jne	near error
   762                                  ;
   763                                  ;   Test assorted 32-bit addressing modes
   764                                  ;
   765 000083A1 66B82800                    	mov	ax,SSEG_PROT32			; we want SS != DS for the next tests
   766 000083A5 8ED0                        	mov	ss,ax
   767
   768 000083A7 B844332211                  	mov	eax,0x11223344
   769 000083AC A300000400                  	mov	[0x40000],eax			; store a known word at the scratch address
   770
   771 000083B1 B900000400                  	mov	ecx,0x40000			; now access that scratch address using various addressing modes
   772 000083B6 3901                        	cmp	[ecx],eax
   773 000083B8 0F85CA060000                	jne	near error
   774
   775 000083BE 81C140000000                	add	ecx,64
   776 000083C4 3941C0                      	cmp	[ecx-64],eax
   777 000083C7 0F85BB060000                	jne	near error
   778 000083CD 81E940000000                	sub	ecx,64
   779
   780 000083D3 D1E9                        	shr	ecx,1
   781 000083D5 398100000200                	cmp	[ecx+0x20000],eax
   782 000083DB 0F85A7060000                	jne	near error
   783
   784 000083E1 390409                      	cmp	[ecx+ecx],eax
   785 000083E4 0F859E060000                	jne	near error
   786
   787 000083EA D1E9                        	shr	ecx,1
   788 000083EC 39844900000100              	cmp	[ecx+ecx*2+0x10000],eax
   789 000083F3 0F858F060000                	jne	near error
   790
   791 000083F9 39048D00000000              	cmp	[ecx*4],eax
   792 00008400 0F8582060000                	jne	near error
   793
   794 00008406 89CD                        	mov	ebp,ecx
   795 00008408 39844D00000100              	cmp	[ebp+ecx*2+0x10000],eax
   796 0000840F 0F8473060000                	je	near error			; since SS != DS, this better be a mismatch
   797
   798 00008415 891500000400            	mov	[0x40000],edx			; restore word at scratch address 0x40000
   799                                  ;
   800                                  ;   Now run a series of unverified opcode tests (verification will happen later, by comparing the output of the tests)
   801                                  ;
   802 0000841B FC                      	cld
   803 0000841C BE[AA850000]            	mov	esi,tableOps			; ESI -> tableOps entry
   804                                  testOps:
   805 00008421 2E0FB60E                	movzx	ecx,byte [cs:esi]		; ECX == length of instruction sequence
   806 00008425 85C9                    	test	ecx,ecx				; (must use JZ since there's no long version of JECXZ)
   807 00008427 0F8485000000            	jz	near testDone			; zero means we've reached the end of the table
   808 0000842D 2E0FB65E01              	movzx	ebx,byte [cs:esi+1]		; EBX == TYPE
   809 00008432 C1E306                  	shl	ebx,6				; EBX == TYPE * 64
   810 00008435 2E0FB65602              	movzx	edx,byte [cs:esi+2]		; EDX == SIZE
   811 0000843A C1E204                  	shl	edx,4				; EDX == SIZE * 16
   812 0000843D 2E8D9C13[48890000]      	lea	ebx,[cs:typeValues+ebx+edx]	; EBX -> values for type
   813 00008445 81C603000000            	add	esi,3				; ESI -> instruction mnemonic
   814 0000844B 2EAC                    .skip:	cs lodsb
   815 0000844D 84C0                    	test	al,al
   816 0000844F 75FA                    	jnz	.skip
   817
   818 00008451 51                      	push	ecx
   819 00008452 2E8B0B                  	mov	ecx,[cs:ebx]			; ECX == count of values for dst
   820 00008455 2E8B4304                	mov	eax,[cs:ebx+4]			; EAX -> values for dst
   821 00008459 2E8B6B08                	mov	ebp,[cs:ebx+8]			; EBP == count of values for src
   822 0000845D 2E8B7B0C                	mov	edi,[cs:ebx+12]			; EDI -> values for src
   823 00008461 93                      	xchg	ebx,eax				; EBX -> values for dst
   824 00008462 29C0                    	sub	eax,eax				; set all ARITH flags to known values prior to tests
   825                                  testDst:
   826 00008464 55                      	push	ebp
   827 00008465 57                      	push	edi
   828 00008466 9C                      	pushfd
   829                                  testSrc:
   830 00008467 2E8B03                  	mov	eax,[cs:ebx]			; EAX == dst
   831 0000846A 2E8B17                  	mov	edx,[cs:edi]			; EDX == src
   832 0000846D 9D                      	popfd
   833 0000846E E844000000              	call	printOp
   834 00008473 E868000000              	call	printEAX
   835 00008478 E879000000              	call	printEDX
   836 0000847D E88C000000              	call	printPS
   837 00008482 FFD6                    	call	esi				; execute the instruction sequence
   838 00008484 E857000000              	call	printEAX
   839 00008489 E868000000              	call	printEDX
   840 0000848E E87B000000              	call	printPS
   841 00008493 E8A6000000              	call	printEOL
   842 00008498 9C                      	pushfd
   843 00008499 81C704000000            	add	edi,4				; EDI -> next src
   844 0000849F 4D                      	dec	ebp				; decrement src count
   845 000084A0 75C5                    	jnz	testSrc
   846
   847 000084A2 9D                      	popfd
   848 000084A3 5F                      	pop	edi				; ESI -> restored values for src
   849 000084A4 5D                      	pop	ebp				; EBP == restored count of values for src
   850 000084A5 8D5B04                  	lea	ebx,[ebx+4]			; EBX -> next dst (without modifying flags)
   851 000084A8 E2BA                    	loop	testDst
   852
   853 000084AA 59                      	pop	ecx
   854 000084AB 01CE                    	add	esi,ecx				; ESI -> next tableOps entry
   855 000084AD E96FFFFFFF              	jmp	testOps
   856
   857                                  testDone:
   858 000084B2 E9625A0000              	jmp	doneProt
   859
   860                                  ;
   861                                  ;   printOp(ESI -> instruction sequence)
   862                                  ;
   863                                  ;   Rewinds ESI to the start of the mnemonic preceding the instruction sequence and prints the mnemonic
   864                                  ;
   865                                  ;   Uses: None
   866                                  ;
   867                                  printOp:
   868 000084B7 9C                      	pushfd
   869 000084B8 60                      	pushad
   870                                  .findSize:
   871 000084B9 4E                      	dec	esi
   872 000084BA 2E8A46FF                	mov	al,[cs:esi-1]
   873 000084BE 3C20                    	cmp	al,32
   874 000084C0 73F7                    	jae	.findSize
   875 000084C2 E896000000              	call	printStr
   876 000084C7 0FB6C0                  	movzx	eax,al
   877 000084CA 2E8A80[A7850000]        	mov	al,[cs:achSize+eax]
   878 000084D1 E872000000              	call	printChar
   879 000084D6 B020                    	mov	al,' '
   880 000084D8 E86B000000              	call	printChar
   881 000084DD 61                      	popad
   882 000084DE 9D                      	popfd
   883 000084DF C3                      	ret
   884
   885                                  ;
   886                                  ;   printEAX()
   887                                  ;
   888                                  ;   Uses: None
   889                                  ;
   890                                  printEAX:
   891 000084E0 9C                      	pushfd
   892 000084E1 60                      	pushad
   893 000084E2 BE[94850000]            	mov	esi,strEAX
   894 000084E7 E871000000              	call	printStr
   895 000084EC B108                    	mov	cl,8
   896 000084EE E87A000000              	call	printVal
   897 000084F3 61                      	popad
   898 000084F4 9D                      	popfd
   899 000084F5 C3                      	ret
   900
   901                                  ;
   902                                  ;   printEDX()
   903                                  ;
   904                                  ;   Uses: None
   905                                  ;
   906                                  printEDX:
   907 000084F6 9C                      	pushfd
   908 000084F7 60                      	pushad
   909 000084F8 BE[99850000]            	mov	esi,strEDX
   910 000084FD E85B000000              	call	printStr
   911 00008502 B108                    	mov	cl,8
   912 00008504 89D0                    	mov	eax,edx
   913 00008506 E862000000              	call	printVal
   914 0000850B 61                      	popad
   915 0000850C 9D                      	popfd
   916 0000850D C3                      	ret
   917
   918                                  ;
   919                                  ;   printPS(ESI -> instruction sequence)
   920                                  ;
   921                                  ;   Uses: None
   922                                  ;
   923                                  printPS:
   924 0000850E 9C                      	pushfd
   925 0000850F 60                      	pushad
   926 00008510 9C                      	pushfd
   927 00008511 5A                      	pop	edx
   928                                  .findType:
   929 00008512 4E                      	dec	esi
   930 00008513 2E8A46FF                	mov	al,[cs:esi-1]
   931 00008517 3C20                    	cmp	al,32
   932 00008519 73F7                    	jae	.findType
   933 0000851B 2E0FB646FE              	movzx	eax,byte [cs:esi-2]
   934 00008520 2E231485[38880000]      	and	edx,[cs:typeMasks+eax*4]
   935 00008528 BE[9E850000]            	mov	esi,strPS
   936 0000852D E82B000000              	call	printStr
   937 00008532 B104                    	mov	cl,4
   938 00008534 89D0                    	mov	eax,edx
   939 00008536 E832000000              	call	printVal
   940 0000853B 61                      	popad
   941 0000853C 9D                      	popfd
   942 0000853D C3                      	ret
   943
   944                                  ;
   945                                  ;   printEOL()
   946                                  ;
   947                                  ;   Uses: None
   948                                  ;
   949                                  printEOL:
   950 0000853E 50                      	push	eax
   951                                  ;	mov	al,0x0d
   952                                  ;	call	printChar
   953 0000853F B00A                    	mov	al,0x0a
   954 00008541 E802000000              	call	printChar
   955 00008546 58                      	pop	eax
   956 00008547 C3                      	ret
   957
   958                                  ;
   959                                  ;   printChar(AL)
   960                                  ;
   961                                  ;   Uses: None
   962                                  ;
   963                                  printChar:
   964 00008548 9C                      	pushfd
   965 00008549 52                      	push	edx
   966 0000854A 50                      	push	eax
   967 0000854B 66BAFD02                	mov	dx,0x2FD			; EDX == COM2 LSR (Line Status Register)
   968 0000854F EC                      .loop:	in	al,dx				;
   969 00008550 A820                    	test	al,0x20				; THR (Transmitter Holding Register) empty?
   970 00008552 74FB                    	jz	.loop				; no
   971 00008554 58                      	pop	eax
   972 00008555 66BAF802                	mov	dx,0x2F8			; EDX -> COM2 THR (Transmitter Holding Register)
   973 00008559 EE                      	out	dx,al
   974 0000855A 5A                      	pop	edx
   975 0000855B 9D                      	popfd
   976 0000855C C3                      	ret
   977
   978                                  ;
   979                                  ;   printStr(ESI -> zero-terminated string)
   980                                  ;
   981                                  ;   Uses: ESI, Flags
   982                                  ;
   983                                  printStr:
   984 0000855D 50                      	push	eax
   985 0000855E 2EAC                    .loop:	cs lodsb
   986 00008560 84C0                    	test	al,al
   987 00008562 7407                    	jz	.done
   988 00008564 E8DFFFFFFF              	call	printChar
   989 00008569 EBF3                    	jmp	.loop
   990 0000856B 58                      .done:	pop	eax
   991 0000856C C3                      	ret
   992
   993                                  ;
   994                                  ;   printVal(EAX == value, CL == number of hex digits)
   995                                  ;
   996                                  ;   Uses: EAX, ECX, Flags
   997                                  ;
   998                                  printVal:
   999 0000856D C0E102                  	shl	cl,2				; CL == number of bits (4 times the number of hex digits)
  1000 00008570 741A                    	jz	.done
  1001 00008572 80E904                  .loop:	sub	cl,4
  1002 00008575 50                      	push	eax
  1003 00008576 D3E8                    	shr	eax,cl
  1004 00008578 240F                    	and	al,0x0f
  1005 0000857A 0430                    	add	al,'0'
  1006 0000857C 3C39                    	cmp	al,'9'
  1007 0000857E 7602                    	jbe	.digit
  1008 00008580 0407                    	add	al,'A'-'0'-10
  1009 00008582 E8C1FFFFFF              .digit:	call	printChar
  1010 00008587 58                      	pop	eax
  1011 00008588 84C9                    	test	cl,cl
  1012 0000858A 75E6                    	jnz	.loop
  1013 0000858C B020                    .done:	mov	al,' '
  1014 0000858E E8B5FFFFFF              	call	printChar
  1015 00008593 C3                      	ret
  1016
  1017                                  TYPE_ARITH	equ	0
  1018                                  TYPE_ARITH1	equ	1
  1019                                  TYPE_LOGIC	equ	2
  1020                                  TYPE_MULTIPLY	equ	3
  1021                                  TYPE_DIVIDE	equ	4
  1022
  1023                                  SIZE_BYTE	equ	0
  1024                                  SIZE_SHORT	equ	1
  1025                                  SIZE_LONG	equ	2
  1026
  1027                                  %macro	defOp	6
  1028                                      %ifidni %3,al
  1029                                  	%assign size SIZE_BYTE
  1030                                      %elifidni %3,dl
  1031                                  	%assign size SIZE_BYTE
  1032                                      %elifidni %3,ax
  1033                                  	%assign size SIZE_SHORT
  1034                                      %elifidni %3,dx
  1035                                  	%assign size SIZE_SHORT
  1036                                      %else
  1037                                  	%assign size SIZE_LONG
  1038                                      %endif
  1039                                  	db	%%end-%%beg,%6,size
  1040                                  %%name:
  1041                                  	db	%1,0
  1042                                  %%beg:
  1043                                      %ifidni %4,none
  1044                                  	%2	%3
  1045                                      %elifidni %5,none
  1046                                  	%2	%3,%4
  1047                                      %else
  1048                                  	%2	%3,%4,%5
  1049                                      %endif
  1050                                  	ret
  1051                                  %%end:
  1052                                  %endmacro
  1053
  1054 00008594 4541583D00              strEAX:	db	"EAX=",0
  1055 00008599 4544583D00              strEDX:	db	"EDX=",0
  1056 0000859E 50533D00                strPS:	db	"PS=",0
  1057 000085A2 2344452000              strDE:	db	"#DE ",0			; when this is displayed, it indicates a Divide Error exception
  1058 000085A7 425744                  achSize	db	"BWD"
  1059
  1060                                  ALLOPS equ 1
  1061
  1062                                  tableOps:
  1063                                  	defOp	"ADD",add,al,dl,none,TYPE_ARITH
  1064                              <1>  %ifidni %3,al
  1065                              <1>  %assign size SIZE_BYTE
  1066                              <1>  %elifidni %3,dl
  1067                              <1>  %assign size SIZE_BYTE
  1068                              <1>  %elifidni %3,ax
  1069                              <1>  %assign size SIZE_SHORT
  1070                              <1>  %elifidni %3,dx
  1071                              <1>  %assign size SIZE_SHORT
  1072                              <1>  %else
  1073                              <1>  %assign size SIZE_LONG
  1074                              <1>  %endif
  1075 000085AA 030000              <1>  db %%end-%%beg,%6,size
  1076                              <1> %%name:
  1077 000085AD 41444400            <1>  db %1,0
  1078                              <1> %%beg:
  1079                              <1>  %ifidni %4,none
  1080                              <1>  %2 %3
  1081                              <1>  %elifidni %5,none
  1082 000085B1 00D0                <1>  %2 %3,%4
  1083                              <1>  %else
  1084                              <1>  %2 %3,%4,%5
  1085                              <1>  %endif
  1086 000085B3 C3                  <1>  ret
  1087                              <1> %%end:
  1088                                  	defOp	"ADD",add,ax,dx,none,TYPE_ARITH
  1089                              <1>  %ifidni %3,al
  1090                              <1>  %assign size SIZE_BYTE
  1091                              <1>  %elifidni %3,dl
  1092                              <1>  %assign size SIZE_BYTE
  1093                              <1>  %elifidni %3,ax
  1094                              <1>  %assign size SIZE_SHORT
  1095                              <1>  %elifidni %3,dx
  1096                              <1>  %assign size SIZE_SHORT
  1097                              <1>  %else
  1098                              <1>  %assign size SIZE_LONG
  1099                              <1>  %endif
  1100 000085B4 040001              <1>  db %%end-%%beg,%6,size
  1101                              <1> %%name:
  1102 000085B7 41444400            <1>  db %1,0
  1103                              <1> %%beg:
  1104                              <1>  %ifidni %4,none
  1105                              <1>  %2 %3
  1106                              <1>  %elifidni %5,none
  1107 000085BB 6601D0              <1>  %2 %3,%4
  1108                              <1>  %else
  1109                              <1>  %2 %3,%4,%5
  1110                              <1>  %endif
  1111 000085BE C3                  <1>  ret
  1112                              <1> %%end:
  1113                                  	defOp	"ADD",add,eax,edx,none,TYPE_ARITH
  1114                              <1>  %ifidni %3,al
  1115                              <1>  %assign size SIZE_BYTE
  1116                              <1>  %elifidni %3,dl
  1117                              <1>  %assign size SIZE_BYTE
  1118                              <1>  %elifidni %3,ax
  1119                              <1>  %assign size SIZE_SHORT
  1120                              <1>  %elifidni %3,dx
  1121                              <1>  %assign size SIZE_SHORT
  1122                              <1>  %else
  1123                              <1>  %assign size SIZE_LONG
  1124                              <1>  %endif
  1125 000085BF 030002              <1>  db %%end-%%beg,%6,size
  1126                              <1> %%name:
  1127 000085C2 41444400            <1>  db %1,0
  1128                              <1> %%beg:
  1129                              <1>  %ifidni %4,none
  1130                              <1>  %2 %3
  1131                              <1>  %elifidni %5,none
  1132 000085C6 01D0                <1>  %2 %3,%4
  1133                              <1>  %else
  1134                              <1>  %2 %3,%4,%5
  1135                              <1>  %endif
  1136 000085C8 C3                  <1>  ret
  1137                              <1> %%end:
  1138                                  	defOp	"OR",or,al,dl,none,TYPE_LOGIC
  1139                              <1>  %ifidni %3,al
  1140                              <1>  %assign size SIZE_BYTE
  1141                              <1>  %elifidni %3,dl
  1142                              <1>  %assign size SIZE_BYTE
  1143                              <1>  %elifidni %3,ax
  1144                              <1>  %assign size SIZE_SHORT
  1145                              <1>  %elifidni %3,dx
  1146                              <1>  %assign size SIZE_SHORT
  1147                              <1>  %else
  1148                              <1>  %assign size SIZE_LONG
  1149                              <1>  %endif
  1150 000085C9 030200              <1>  db %%end-%%beg,%6,size
  1151                              <1> %%name:
  1152 000085CC 4F5200              <1>  db %1,0
  1153                              <1> %%beg:
  1154                              <1>  %ifidni %4,none
  1155                              <1>  %2 %3
  1156                              <1>  %elifidni %5,none
  1157 000085CF 08D0                <1>  %2 %3,%4
  1158                              <1>  %else
  1159                              <1>  %2 %3,%4,%5
  1160                              <1>  %endif
  1161 000085D1 C3                  <1>  ret
  1162                              <1> %%end:
  1163                                  	defOp	"OR",or,ax,dx,none,TYPE_LOGIC
  1164                              <1>  %ifidni %3,al
  1165                              <1>  %assign size SIZE_BYTE
  1166                              <1>  %elifidni %3,dl
  1167                              <1>  %assign size SIZE_BYTE
  1168                              <1>  %elifidni %3,ax
  1169                              <1>  %assign size SIZE_SHORT
  1170                              <1>  %elifidni %3,dx
  1171                              <1>  %assign size SIZE_SHORT
  1172                              <1>  %else
  1173                              <1>  %assign size SIZE_LONG
  1174                              <1>  %endif
  1175 000085D2 040201              <1>  db %%end-%%beg,%6,size
  1176                              <1> %%name:
  1177 000085D5 4F5200              <1>  db %1,0
  1178                              <1> %%beg:
  1179                              <1>  %ifidni %4,none
  1180                              <1>  %2 %3
  1181                              <1>  %elifidni %5,none
  1182 000085D8 6609D0              <1>  %2 %3,%4
  1183                              <1>  %else
  1184                              <1>  %2 %3,%4,%5
  1185                              <1>  %endif
  1186 000085DB C3                  <1>  ret
  1187                              <1> %%end:
  1188                                  	defOp	"OR",or,eax,edx,none,TYPE_LOGIC
  1189                              <1>  %ifidni %3,al
  1190                              <1>  %assign size SIZE_BYTE
  1191                              <1>  %elifidni %3,dl
  1192                              <1>  %assign size SIZE_BYTE
  1193                              <1>  %elifidni %3,ax
  1194                              <1>  %assign size SIZE_SHORT
  1195                              <1>  %elifidni %3,dx
  1196                              <1>  %assign size SIZE_SHORT
  1197                              <1>  %else
  1198                              <1>  %assign size SIZE_LONG
  1199                              <1>  %endif
  1200 000085DC 030202              <1>  db %%end-%%beg,%6,size
  1201                              <1> %%name:
  1202 000085DF 4F5200              <1>  db %1,0
  1203                              <1> %%beg:
  1204                              <1>  %ifidni %4,none
  1205                              <1>  %2 %3
  1206                              <1>  %elifidni %5,none
  1207 000085E2 09D0                <1>  %2 %3,%4
  1208                              <1>  %else
  1209                              <1>  %2 %3,%4,%5
  1210                              <1>  %endif
  1211 000085E4 C3                  <1>  ret
  1212                              <1> %%end:
  1213                                  	defOp	"ADC",adc,al,dl,none,TYPE_ARITH
  1214                              <1>  %ifidni %3,al
  1215                              <1>  %assign size SIZE_BYTE
  1216                              <1>  %elifidni %3,dl
  1217                              <1>  %assign size SIZE_BYTE
  1218                              <1>  %elifidni %3,ax
  1219                              <1>  %assign size SIZE_SHORT
  1220                              <1>  %elifidni %3,dx
  1221                              <1>  %assign size SIZE_SHORT
  1222                              <1>  %else
  1223                              <1>  %assign size SIZE_LONG
  1224                              <1>  %endif
  1225 000085E5 030000              <1>  db %%end-%%beg,%6,size
  1226                              <1> %%name:
  1227 000085E8 41444300            <1>  db %1,0
  1228                              <1> %%beg:
  1229                              <1>  %ifidni %4,none
  1230                              <1>  %2 %3
  1231                              <1>  %elifidni %5,none
  1232 000085EC 10D0                <1>  %2 %3,%4
  1233                              <1>  %else
  1234                              <1>  %2 %3,%4,%5
  1235                              <1>  %endif
  1236 000085EE C3                  <1>  ret
  1237                              <1> %%end:
  1238                                  	defOp	"ADC",adc,ax,dx,none,TYPE_ARITH
  1239                              <1>  %ifidni %3,al
  1240                              <1>  %assign size SIZE_BYTE
  1241                              <1>  %elifidni %3,dl
  1242                              <1>  %assign size SIZE_BYTE
  1243                              <1>  %elifidni %3,ax
  1244                              <1>  %assign size SIZE_SHORT
  1245                              <1>  %elifidni %3,dx
  1246                              <1>  %assign size SIZE_SHORT
  1247                              <1>  %else
  1248                              <1>  %assign size SIZE_LONG
  1249                              <1>  %endif
  1250 000085EF 040001              <1>  db %%end-%%beg,%6,size
  1251                              <1> %%name:
  1252 000085F2 41444300            <1>  db %1,0
  1253                              <1> %%beg:
  1254                              <1>  %ifidni %4,none
  1255                              <1>  %2 %3
  1256                              <1>  %elifidni %5,none
  1257 000085F6 6611D0              <1>  %2 %3,%4
  1258                              <1>  %else
  1259                              <1>  %2 %3,%4,%5
  1260                              <1>  %endif
  1261 000085F9 C3                  <1>  ret
  1262                              <1> %%end:
  1263                                  	defOp	"ADC",adc,eax,edx,none,TYPE_ARITH
  1264                              <1>  %ifidni %3,al
  1265                              <1>  %assign size SIZE_BYTE
  1266                              <1>  %elifidni %3,dl
  1267                              <1>  %assign size SIZE_BYTE
  1268                              <1>  %elifidni %3,ax
  1269                              <1>  %assign size SIZE_SHORT
  1270                              <1>  %elifidni %3,dx
  1271                              <1>  %assign size SIZE_SHORT
  1272                              <1>  %else
  1273                              <1>  %assign size SIZE_LONG
  1274                              <1>  %endif
  1275 000085FA 030002              <1>  db %%end-%%beg,%6,size
  1276                              <1> %%name:
  1277 000085FD 41444300            <1>  db %1,0
  1278                              <1> %%beg:
  1279                              <1>  %ifidni %4,none
  1280                              <1>  %2 %3
  1281                              <1>  %elifidni %5,none
  1282 00008601 11D0                <1>  %2 %3,%4
  1283                              <1>  %else
  1284                              <1>  %2 %3,%4,%5
  1285                              <1>  %endif
  1286 00008603 C3                  <1>  ret
  1287                              <1> %%end:
  1288                                  	defOp	"SBB",sbb,al,dl,none,TYPE_ARITH
  1289                              <1>  %ifidni %3,al
  1290                              <1>  %assign size SIZE_BYTE
  1291                              <1>  %elifidni %3,dl
  1292                              <1>  %assign size SIZE_BYTE
  1293                              <1>  %elifidni %3,ax
  1294                              <1>  %assign size SIZE_SHORT
  1295                              <1>  %elifidni %3,dx
  1296                              <1>  %assign size SIZE_SHORT
  1297                              <1>  %else
  1298                              <1>  %assign size SIZE_LONG
  1299                              <1>  %endif
  1300 00008604 030000              <1>  db %%end-%%beg,%6,size
  1301                              <1> %%name:
  1302 00008607 53424200            <1>  db %1,0
  1303                              <1> %%beg:
  1304                              <1>  %ifidni %4,none
  1305                              <1>  %2 %3
  1306                              <1>  %elifidni %5,none
  1307 0000860B 18D0                <1>  %2 %3,%4
  1308                              <1>  %else
  1309                              <1>  %2 %3,%4,%5
  1310                              <1>  %endif
  1311 0000860D C3                  <1>  ret
  1312                              <1> %%end:
  1313                                  	defOp	"SBB",sbb,ax,dx,none,TYPE_ARITH
  1314                              <1>  %ifidni %3,al
  1315                              <1>  %assign size SIZE_BYTE
  1316                              <1>  %elifidni %3,dl
  1317                              <1>  %assign size SIZE_BYTE
  1318                              <1>  %elifidni %3,ax
  1319                              <1>  %assign size SIZE_SHORT
  1320                              <1>  %elifidni %3,dx
  1321                              <1>  %assign size SIZE_SHORT
  1322                              <1>  %else
  1323                              <1>  %assign size SIZE_LONG
  1324                              <1>  %endif
  1325 0000860E 040001              <1>  db %%end-%%beg,%6,size
  1326                              <1> %%name:
  1327 00008611 53424200            <1>  db %1,0
  1328                              <1> %%beg:
  1329                              <1>  %ifidni %4,none
  1330                              <1>  %2 %3
  1331                              <1>  %elifidni %5,none
  1332 00008615 6619D0              <1>  %2 %3,%4
  1333                              <1>  %else
  1334                              <1>  %2 %3,%4,%5
  1335                              <1>  %endif
  1336 00008618 C3                  <1>  ret
  1337                              <1> %%end:
  1338                                  	defOp	"SBB",sbb,eax,edx,none,TYPE_ARITH
  1339                              <1>  %ifidni %3,al
  1340                              <1>  %assign size SIZE_BYTE
  1341                              <1>  %elifidni %3,dl
  1342                              <1>  %assign size SIZE_BYTE
  1343                              <1>  %elifidni %3,ax
  1344                              <1>  %assign size SIZE_SHORT
  1345                              <1>  %elifidni %3,dx
  1346                              <1>  %assign size SIZE_SHORT
  1347                              <1>  %else
  1348                              <1>  %assign size SIZE_LONG
  1349                              <1>  %endif
  1350 00008619 030002              <1>  db %%end-%%beg,%6,size
  1351                              <1> %%name:
  1352 0000861C 53424200            <1>  db %1,0
  1353                              <1> %%beg:
  1354                              <1>  %ifidni %4,none
  1355                              <1>  %2 %3
  1356                              <1>  %elifidni %5,none
  1357 00008620 19D0                <1>  %2 %3,%4
  1358                              <1>  %else
  1359                              <1>  %2 %3,%4,%5
  1360                              <1>  %endif
  1361 00008622 C3                  <1>  ret
  1362                              <1> %%end:
  1363                                  	defOp	"AND",and,al,dl,none,TYPE_LOGIC
  1364                              <1>  %ifidni %3,al
  1365                              <1>  %assign size SIZE_BYTE
  1366                              <1>  %elifidni %3,dl
  1367                              <1>  %assign size SIZE_BYTE
  1368                              <1>  %elifidni %3,ax
  1369                              <1>  %assign size SIZE_SHORT
  1370                              <1>  %elifidni %3,dx
  1371                              <1>  %assign size SIZE_SHORT
  1372                              <1>  %else
  1373                              <1>  %assign size SIZE_LONG
  1374                              <1>  %endif
  1375 00008623 030200              <1>  db %%end-%%beg,%6,size
  1376                              <1> %%name:
  1377 00008626 414E4400            <1>  db %1,0
  1378                              <1> %%beg:
  1379                              <1>  %ifidni %4,none
  1380                              <1>  %2 %3
  1381                              <1>  %elifidni %5,none
  1382 0000862A 20D0                <1>  %2 %3,%4
  1383                              <1>  %else
  1384                              <1>  %2 %3,%4,%5
  1385                              <1>  %endif
  1386 0000862C C3                  <1>  ret
  1387                              <1> %%end:
  1388                                  	defOp	"AND",and,ax,dx,none,TYPE_LOGIC
  1389                              <1>  %ifidni %3,al
  1390                              <1>  %assign size SIZE_BYTE
  1391                              <1>  %elifidni %3,dl
  1392                              <1>  %assign size SIZE_BYTE
  1393                              <1>  %elifidni %3,ax
  1394                              <1>  %assign size SIZE_SHORT
  1395                              <1>  %elifidni %3,dx
  1396                              <1>  %assign size SIZE_SHORT
  1397                              <1>  %else
  1398                              <1>  %assign size SIZE_LONG
  1399                              <1>  %endif
  1400 0000862D 040201              <1>  db %%end-%%beg,%6,size
  1401                              <1> %%name:
  1402 00008630 414E4400            <1>  db %1,0
  1403                              <1> %%beg:
  1404                              <1>  %ifidni %4,none
  1405                              <1>  %2 %3
  1406                              <1>  %elifidni %5,none
  1407 00008634 6621D0              <1>  %2 %3,%4
  1408                              <1>  %else
  1409                              <1>  %2 %3,%4,%5
  1410                              <1>  %endif
  1411 00008637 C3                  <1>  ret
  1412                              <1> %%end:
  1413                                  	defOp	"AND",and,eax,edx,none,TYPE_LOGIC
  1414                              <1>  %ifidni %3,al
  1415                              <1>  %assign size SIZE_BYTE
  1416                              <1>  %elifidni %3,dl
  1417                              <1>  %assign size SIZE_BYTE
  1418                              <1>  %elifidni %3,ax
  1419                              <1>  %assign size SIZE_SHORT
  1420                              <1>  %elifidni %3,dx
  1421                              <1>  %assign size SIZE_SHORT
  1422                              <1>  %else
  1423                              <1>  %assign size SIZE_LONG
  1424                              <1>  %endif
  1425 00008638 030202              <1>  db %%end-%%beg,%6,size
  1426                              <1> %%name:
  1427 0000863B 414E4400            <1>  db %1,0
  1428                              <1> %%beg:
  1429                              <1>  %ifidni %4,none
  1430                              <1>  %2 %3
  1431                              <1>  %elifidni %5,none
  1432 0000863F 21D0                <1>  %2 %3,%4
  1433                              <1>  %else
  1434                              <1>  %2 %3,%4,%5
  1435                              <1>  %endif
  1436 00008641 C3                  <1>  ret
  1437                              <1> %%end:
  1438                                  	defOp	"SUB",sub,al,dl,none,TYPE_ARITH
  1439                              <1>  %ifidni %3,al
  1440                              <1>  %assign size SIZE_BYTE
  1441                              <1>  %elifidni %3,dl
  1442                              <1>  %assign size SIZE_BYTE
  1443                              <1>  %elifidni %3,ax
  1444                              <1>  %assign size SIZE_SHORT
  1445                              <1>  %elifidni %3,dx
  1446                              <1>  %assign size SIZE_SHORT
  1447                              <1>  %else
  1448                              <1>  %assign size SIZE_LONG
  1449                              <1>  %endif
  1450 00008642 030000              <1>  db %%end-%%beg,%6,size
  1451                              <1> %%name:
  1452 00008645 53554200            <1>  db %1,0
  1453                              <1> %%beg:
  1454                              <1>  %ifidni %4,none
  1455                              <1>  %2 %3
  1456                              <1>  %elifidni %5,none
  1457 00008649 28D0                <1>  %2 %3,%4
  1458                              <1>  %else
  1459                              <1>  %2 %3,%4,%5
  1460                              <1>  %endif
  1461 0000864B C3                  <1>  ret
  1462                              <1> %%end:
  1463                                  	defOp	"SUB",sub,ax,dx,none,TYPE_ARITH
  1464                              <1>  %ifidni %3,al
  1465                              <1>  %assign size SIZE_BYTE
  1466                              <1>  %elifidni %3,dl
  1467                              <1>  %assign size SIZE_BYTE
  1468                              <1>  %elifidni %3,ax
  1469                              <1>  %assign size SIZE_SHORT
  1470                              <1>  %elifidni %3,dx
  1471                              <1>  %assign size SIZE_SHORT
  1472                              <1>  %else
  1473                              <1>  %assign size SIZE_LONG
  1474                              <1>  %endif
  1475 0000864C 040001              <1>  db %%end-%%beg,%6,size
  1476                              <1> %%name:
  1477 0000864F 53554200            <1>  db %1,0
  1478                              <1> %%beg:
  1479                              <1>  %ifidni %4,none
  1480                              <1>  %2 %3
  1481                              <1>  %elifidni %5,none
  1482 00008653 6629D0              <1>  %2 %3,%4
  1483                              <1>  %else
  1484                              <1>  %2 %3,%4,%5
  1485                              <1>  %endif
  1486 00008656 C3                  <1>  ret
  1487                              <1> %%end:
  1488                                  	defOp	"SUB",sub,eax,edx,none,TYPE_ARITH
  1489                              <1>  %ifidni %3,al
  1490                              <1>  %assign size SIZE_BYTE
  1491                              <1>  %elifidni %3,dl
  1492                              <1>  %assign size SIZE_BYTE
  1493                              <1>  %elifidni %3,ax
  1494                              <1>  %assign size SIZE_SHORT
  1495                              <1>  %elifidni %3,dx
  1496                              <1>  %assign size SIZE_SHORT
  1497                              <1>  %else
  1498                              <1>  %assign size SIZE_LONG
  1499                              <1>  %endif
  1500 00008657 030002              <1>  db %%end-%%beg,%6,size
  1501                              <1> %%name:
  1502 0000865A 53554200            <1>  db %1,0
  1503                              <1> %%beg:
  1504                              <1>  %ifidni %4,none
  1505                              <1>  %2 %3
  1506                              <1>  %elifidni %5,none
  1507 0000865E 29D0                <1>  %2 %3,%4
  1508                              <1>  %else
  1509                              <1>  %2 %3,%4,%5
  1510                              <1>  %endif
  1511 00008660 C3                  <1>  ret
  1512                              <1> %%end:
  1513                                  	defOp	"XOR",xor,al,dl,none,TYPE_LOGIC
  1514                              <1>  %ifidni %3,al
  1515                              <1>  %assign size SIZE_BYTE
  1516                              <1>  %elifidni %3,dl
  1517                              <1>  %assign size SIZE_BYTE
  1518                              <1>  %elifidni %3,ax
  1519                              <1>  %assign size SIZE_SHORT
  1520                              <1>  %elifidni %3,dx
  1521                              <1>  %assign size SIZE_SHORT
  1522                              <1>  %else
  1523                              <1>  %assign size SIZE_LONG
  1524                              <1>  %endif
  1525 00008661 030200              <1>  db %%end-%%beg,%6,size
  1526                              <1> %%name:
  1527 00008664 584F5200            <1>  db %1,0
  1528                              <1> %%beg:
  1529                              <1>  %ifidni %4,none
  1530                              <1>  %2 %3
  1531                              <1>  %elifidni %5,none
  1532 00008668 30D0                <1>  %2 %3,%4
  1533                              <1>  %else
  1534                              <1>  %2 %3,%4,%5
  1535                              <1>  %endif
  1536 0000866A C3                  <1>  ret
  1537                              <1> %%end:
  1538                                  	defOp	"XOR",xor,ax,dx,none,TYPE_LOGIC
  1539                              <1>  %ifidni %3,al
  1540                              <1>  %assign size SIZE_BYTE
  1541                              <1>  %elifidni %3,dl
  1542                              <1>  %assign size SIZE_BYTE
  1543                              <1>  %elifidni %3,ax
  1544                              <1>  %assign size SIZE_SHORT
  1545                              <1>  %elifidni %3,dx
  1546                              <1>  %assign size SIZE_SHORT
  1547                              <1>  %else
  1548                              <1>  %assign size SIZE_LONG
  1549                              <1>  %endif
  1550 0000866B 040201              <1>  db %%end-%%beg,%6,size
  1551                              <1> %%name:
  1552 0000866E 584F5200            <1>  db %1,0
  1553                              <1> %%beg:
  1554                              <1>  %ifidni %4,none
  1555                              <1>  %2 %3
  1556                              <1>  %elifidni %5,none
  1557 00008672 6631D0              <1>  %2 %3,%4
  1558                              <1>  %else
  1559                              <1>  %2 %3,%4,%5
  1560                              <1>  %endif
  1561 00008675 C3                  <1>  ret
  1562                              <1> %%end:
  1563                                  	defOp	"XOR",xor,eax,edx,none,TYPE_LOGIC
  1564                              <1>  %ifidni %3,al
  1565                              <1>  %assign size SIZE_BYTE
  1566                              <1>  %elifidni %3,dl
  1567                              <1>  %assign size SIZE_BYTE
  1568                              <1>  %elifidni %3,ax
  1569                              <1>  %assign size SIZE_SHORT
  1570                              <1>  %elifidni %3,dx
  1571                              <1>  %assign size SIZE_SHORT
  1572                              <1>  %else
  1573                              <1>  %assign size SIZE_LONG
  1574                              <1>  %endif
  1575 00008676 030202              <1>  db %%end-%%beg,%6,size
  1576                              <1> %%name:
  1577 00008679 584F5200            <1>  db %1,0
  1578                              <1> %%beg:
  1579                              <1>  %ifidni %4,none
  1580                              <1>  %2 %3
  1581                              <1>  %elifidni %5,none
  1582 0000867D 31D0                <1>  %2 %3,%4
  1583                              <1>  %else
  1584                              <1>  %2 %3,%4,%5
  1585                              <1>  %endif
  1586 0000867F C3                  <1>  ret
  1587                              <1> %%end:
  1588                                  	defOp	"CMP",cmp,al,dl,none,TYPE_ARITH
  1589                              <1>  %ifidni %3,al
  1590                              <1>  %assign size SIZE_BYTE
  1591                              <1>  %elifidni %3,dl
  1592                              <1>  %assign size SIZE_BYTE
  1593                              <1>  %elifidni %3,ax
  1594                              <1>  %assign size SIZE_SHORT
  1595                              <1>  %elifidni %3,dx
  1596                              <1>  %assign size SIZE_SHORT
  1597                              <1>  %else
  1598                              <1>  %assign size SIZE_LONG
  1599                              <1>  %endif
  1600 00008680 030000              <1>  db %%end-%%beg,%6,size
  1601                              <1> %%name:
  1602 00008683 434D5000            <1>  db %1,0
  1603                              <1> %%beg:
  1604                              <1>  %ifidni %4,none
  1605                              <1>  %2 %3
  1606                              <1>  %elifidni %5,none
  1607 00008687 38D0                <1>  %2 %3,%4
  1608                              <1>  %else
  1609                              <1>  %2 %3,%4,%5
  1610                              <1>  %endif
  1611 00008689 C3                  <1>  ret
  1612                              <1> %%end:
  1613                                  	defOp	"CMP",cmp,ax,dx,none,TYPE_ARITH
  1614                              <1>  %ifidni %3,al
  1615                              <1>  %assign size SIZE_BYTE
  1616                              <1>  %elifidni %3,dl
  1617                              <1>  %assign size SIZE_BYTE
  1618                              <1>  %elifidni %3,ax
  1619                              <1>  %assign size SIZE_SHORT
  1620                              <1>  %elifidni %3,dx
  1621                              <1>  %assign size SIZE_SHORT
  1622                              <1>  %else
  1623                              <1>  %assign size SIZE_LONG
  1624                              <1>  %endif
  1625 0000868A 040001              <1>  db %%end-%%beg,%6,size
  1626                              <1> %%name:
  1627 0000868D 434D5000            <1>  db %1,0
  1628                              <1> %%beg:
  1629                              <1>  %ifidni %4,none
  1630                              <1>  %2 %3
  1631                              <1>  %elifidni %5,none
  1632 00008691 6639D0              <1>  %2 %3,%4
  1633                              <1>  %else
  1634                              <1>  %2 %3,%4,%5
  1635                              <1>  %endif
  1636 00008694 C3                  <1>  ret
  1637                              <1> %%end:
  1638                                  	defOp	"CMP",cmp,eax,edx,none,TYPE_ARITH
  1639                              <1>  %ifidni %3,al
  1640                              <1>  %assign size SIZE_BYTE
  1641                              <1>  %elifidni %3,dl
  1642                              <1>  %assign size SIZE_BYTE
  1643                              <1>  %elifidni %3,ax
  1644                              <1>  %assign size SIZE_SHORT
  1645                              <1>  %elifidni %3,dx
  1646                              <1>  %assign size SIZE_SHORT
  1647                              <1>  %else
  1648                              <1>  %assign size SIZE_LONG
  1649                              <1>  %endif
  1650 00008695 030002              <1>  db %%end-%%beg,%6,size
  1651                              <1> %%name:
  1652 00008698 434D5000            <1>  db %1,0
  1653                              <1> %%beg:
  1654                              <1>  %ifidni %4,none
  1655                              <1>  %2 %3
  1656                              <1>  %elifidni %5,none
  1657 0000869C 39D0                <1>  %2 %3,%4
  1658                              <1>  %else
  1659                              <1>  %2 %3,%4,%5
  1660                              <1>  %endif
  1661 0000869E C3                  <1>  ret
  1662                              <1> %%end:
  1663                                  	defOp	"INC",inc,al,none,none,TYPE_ARITH1
  1664                              <1>  %ifidni %3,al
  1665                              <1>  %assign size SIZE_BYTE
  1666                              <1>  %elifidni %3,dl
  1667                              <1>  %assign size SIZE_BYTE
  1668                              <1>  %elifidni %3,ax
  1669                              <1>  %assign size SIZE_SHORT
  1670                              <1>  %elifidni %3,dx
  1671                              <1>  %assign size SIZE_SHORT
  1672                              <1>  %else
  1673                              <1>  %assign size SIZE_LONG
  1674                              <1>  %endif
  1675 0000869F 030100              <1>  db %%end-%%beg,%6,size
  1676                              <1> %%name:
  1677 000086A2 494E4300            <1>  db %1,0
  1678                              <1> %%beg:
  1679                              <1>  %ifidni %4,none
  1680 000086A6 FEC0                <1>  %2 %3
  1681                              <1>  %elifidni %5,none
  1682                              <1>  %2 %3,%4
  1683                              <1>  %else
  1684                              <1>  %2 %3,%4,%5
  1685                              <1>  %endif
  1686 000086A8 C3                  <1>  ret
  1687                              <1> %%end:
  1688                                  	defOp	"INC",inc,ax,none,none,TYPE_ARITH1
  1689                              <1>  %ifidni %3,al
  1690                              <1>  %assign size SIZE_BYTE
  1691                              <1>  %elifidni %3,dl
  1692                              <1>  %assign size SIZE_BYTE
  1693                              <1>  %elifidni %3,ax
  1694                              <1>  %assign size SIZE_SHORT
  1695                              <1>  %elifidni %3,dx
  1696                              <1>  %assign size SIZE_SHORT
  1697                              <1>  %else
  1698                              <1>  %assign size SIZE_LONG
  1699                              <1>  %endif
  1700 000086A9 030101              <1>  db %%end-%%beg,%6,size
  1701                              <1> %%name:
  1702 000086AC 494E4300            <1>  db %1,0
  1703                              <1> %%beg:
  1704                              <1>  %ifidni %4,none
  1705 000086B0 6640                <1>  %2 %3
  1706                              <1>  %elifidni %5,none
  1707                              <1>  %2 %3,%4
  1708                              <1>  %else
  1709                              <1>  %2 %3,%4,%5
  1710                              <1>  %endif
  1711 000086B2 C3                  <1>  ret
  1712                              <1> %%end:
  1713                                  	defOp	"INC",inc,eax,none,none,TYPE_ARITH1
  1714                              <1>  %ifidni %3,al
  1715                              <1>  %assign size SIZE_BYTE
  1716                              <1>  %elifidni %3,dl
  1717                              <1>  %assign size SIZE_BYTE
  1718                              <1>  %elifidni %3,ax
  1719                              <1>  %assign size SIZE_SHORT
  1720                              <1>  %elifidni %3,dx
  1721                              <1>  %assign size SIZE_SHORT
  1722                              <1>  %else
  1723                              <1>  %assign size SIZE_LONG
  1724                              <1>  %endif
  1725 000086B3 020102              <1>  db %%end-%%beg,%6,size
  1726                              <1> %%name:
  1727 000086B6 494E4300            <1>  db %1,0
  1728                              <1> %%beg:
  1729                              <1>  %ifidni %4,none
  1730 000086BA 40                  <1>  %2 %3
  1731                              <1>  %elifidni %5,none
  1732                              <1>  %2 %3,%4
  1733                              <1>  %else
  1734                              <1>  %2 %3,%4,%5
  1735                              <1>  %endif
  1736 000086BB C3                  <1>  ret
  1737                              <1> %%end:
  1738                                  	defOp	"DEC",dec,al,none,none,TYPE_ARITH1
  1739                              <1>  %ifidni %3,al
  1740                              <1>  %assign size SIZE_BYTE
  1741                              <1>  %elifidni %3,dl
  1742                              <1>  %assign size SIZE_BYTE
  1743                              <1>  %elifidni %3,ax
  1744                              <1>  %assign size SIZE_SHORT
  1745                              <1>  %elifidni %3,dx
  1746                              <1>  %assign size SIZE_SHORT
  1747                              <1>  %else
  1748                              <1>  %assign size SIZE_LONG
  1749                              <1>  %endif
  1750 000086BC 030100              <1>  db %%end-%%beg,%6,size
  1751                              <1> %%name:
  1752 000086BF 44454300            <1>  db %1,0
  1753                              <1> %%beg:
  1754                              <1>  %ifidni %4,none
  1755 000086C3 FEC8                <1>  %2 %3
  1756                              <1>  %elifidni %5,none
  1757                              <1>  %2 %3,%4
  1758                              <1>  %else
  1759                              <1>  %2 %3,%4,%5
  1760                              <1>  %endif
  1761 000086C5 C3                  <1>  ret
  1762                              <1> %%end:
  1763                                  	defOp	"DEC",dec,ax,none,none,TYPE_ARITH1
  1764                              <1>  %ifidni %3,al
  1765                              <1>  %assign size SIZE_BYTE
  1766                              <1>  %elifidni %3,dl
  1767                              <1>  %assign size SIZE_BYTE
  1768                              <1>  %elifidni %3,ax
  1769                              <1>  %assign size SIZE_SHORT
  1770                              <1>  %elifidni %3,dx
  1771                              <1>  %assign size SIZE_SHORT
  1772                              <1>  %else
  1773                              <1>  %assign size SIZE_LONG
  1774                              <1>  %endif
  1775 000086C6 030101              <1>  db %%end-%%beg,%6,size
  1776                              <1> %%name:
  1777 000086C9 44454300            <1>  db %1,0
  1778                              <1> %%beg:
  1779                              <1>  %ifidni %4,none
  1780 000086CD 6648                <1>  %2 %3
  1781                              <1>  %elifidni %5,none
  1782                              <1>  %2 %3,%4
  1783                              <1>  %else
  1784                              <1>  %2 %3,%4,%5
  1785                              <1>  %endif
  1786 000086CF C3                  <1>  ret
  1787                              <1> %%end:
  1788                                  	defOp	"DEC",dec,eax,none,none,TYPE_ARITH1
  1789                              <1>  %ifidni %3,al
  1790                              <1>  %assign size SIZE_BYTE
  1791                              <1>  %elifidni %3,dl
  1792                              <1>  %assign size SIZE_BYTE
  1793                              <1>  %elifidni %3,ax
  1794                              <1>  %assign size SIZE_SHORT
  1795                              <1>  %elifidni %3,dx
  1796                              <1>  %assign size SIZE_SHORT
  1797                              <1>  %else
  1798                              <1>  %assign size SIZE_LONG
  1799                              <1>  %endif
  1800 000086D0 020102              <1>  db %%end-%%beg,%6,size
  1801                              <1> %%name:
  1802 000086D3 44454300            <1>  db %1,0
  1803                              <1> %%beg:
  1804                              <1>  %ifidni %4,none
  1805 000086D7 48                  <1>  %2 %3
  1806                              <1>  %elifidni %5,none
  1807                              <1>  %2 %3,%4
  1808                              <1>  %else
  1809                              <1>  %2 %3,%4,%5
  1810                              <1>  %endif
  1811 000086D8 C3                  <1>  ret
  1812                              <1> %%end:
  1813                                  	defOp	"MULA",mul,dl,none,none,TYPE_MULTIPLY
  1814                              <1>  %ifidni %3,al
  1815                              <1>  %assign size SIZE_BYTE
  1816                              <1>  %elifidni %3,dl
  1817                              <1>  %assign size SIZE_BYTE
  1818                              <1>  %elifidni %3,ax
  1819                              <1>  %assign size SIZE_SHORT
  1820                              <1>  %elifidni %3,dx
  1821                              <1>  %assign size SIZE_SHORT
  1822                              <1>  %else
  1823                              <1>  %assign size SIZE_LONG
  1824                              <1>  %endif
  1825 000086D9 030300              <1>  db %%end-%%beg,%6,size
  1826                              <1> %%name:
  1827 000086DC 4D554C4100          <1>  db %1,0
  1828                              <1> %%beg:
  1829                              <1>  %ifidni %4,none
  1830 000086E1 F6E2                <1>  %2 %3
  1831                              <1>  %elifidni %5,none
  1832                              <1>  %2 %3,%4
  1833                              <1>  %else
  1834                              <1>  %2 %3,%4,%5
  1835                              <1>  %endif
  1836 000086E3 C3                  <1>  ret
  1837                              <1> %%end:
  1838                                  	defOp	"MULA",mul,dx,none,none,TYPE_MULTIPLY
  1839                              <1>  %ifidni %3,al
  1840                              <1>  %assign size SIZE_BYTE
  1841                              <1>  %elifidni %3,dl
  1842                              <1>  %assign size SIZE_BYTE
  1843                              <1>  %elifidni %3,ax
  1844                              <1>  %assign size SIZE_SHORT
  1845                              <1>  %elifidni %3,dx
  1846                              <1>  %assign size SIZE_SHORT
  1847                              <1>  %else
  1848                              <1>  %assign size SIZE_LONG
  1849                              <1>  %endif
  1850 000086E4 040301              <1>  db %%end-%%beg,%6,size
  1851                              <1> %%name:
  1852 000086E7 4D554C4100          <1>  db %1,0
  1853                              <1> %%beg:
  1854                              <1>  %ifidni %4,none
  1855 000086EC 66F7E2              <1>  %2 %3
  1856                              <1>  %elifidni %5,none
  1857                              <1>  %2 %3,%4
  1858                              <1>  %else
  1859                              <1>  %2 %3,%4,%5
  1860                              <1>  %endif
  1861 000086EF C3                  <1>  ret
  1862                              <1> %%end:
  1863                                  	defOp	"MULA",mul,edx,none,none,TYPE_MULTIPLY
  1864                              <1>  %ifidni %3,al
  1865                              <1>  %assign size SIZE_BYTE
  1866                              <1>  %elifidni %3,dl
  1867                              <1>  %assign size SIZE_BYTE
  1868                              <1>  %elifidni %3,ax
  1869                              <1>  %assign size SIZE_SHORT
  1870                              <1>  %elifidni %3,dx
  1871                              <1>  %assign size SIZE_SHORT
  1872                              <1>  %else
  1873                              <1>  %assign size SIZE_LONG
  1874                              <1>  %endif
  1875 000086F0 030302              <1>  db %%end-%%beg,%6,size
  1876                              <1> %%name:
  1877 000086F3 4D554C4100          <1>  db %1,0
  1878                              <1> %%beg:
  1879                              <1>  %ifidni %4,none
  1880 000086F8 F7E2                <1>  %2 %3
  1881                              <1>  %elifidni %5,none
  1882                              <1>  %2 %3,%4
  1883                              <1>  %else
  1884                              <1>  %2 %3,%4,%5
  1885                              <1>  %endif
  1886 000086FA C3                  <1>  ret
  1887                              <1> %%end:
  1888                                  	defOp	"IMULA",imul,dl,none,none,TYPE_MULTIPLY
  1889                              <1>  %ifidni %3,al
  1890                              <1>  %assign size SIZE_BYTE
  1891                              <1>  %elifidni %3,dl
  1892                              <1>  %assign size SIZE_BYTE
  1893                              <1>  %elifidni %3,ax
  1894                              <1>  %assign size SIZE_SHORT
  1895                              <1>  %elifidni %3,dx
  1896                              <1>  %assign size SIZE_SHORT
  1897                              <1>  %else
  1898                              <1>  %assign size SIZE_LONG
  1899                              <1>  %endif
  1900 000086FB 030300              <1>  db %%end-%%beg,%6,size
  1901                              <1> %%name:
  1902 000086FE 494D554C4100        <1>  db %1,0
  1903                              <1> %%beg:
  1904                              <1>  %ifidni %4,none
  1905 00008704 F6EA                <1>  %2 %3
  1906                              <1>  %elifidni %5,none
  1907                              <1>  %2 %3,%4
  1908                              <1>  %else
  1909                              <1>  %2 %3,%4,%5
  1910                              <1>  %endif
  1911 00008706 C3                  <1>  ret
  1912                              <1> %%end:
  1913                                  	defOp	"IMULA",imul,dx,none,none,TYPE_MULTIPLY
  1914                              <1>  %ifidni %3,al
  1915                              <1>  %assign size SIZE_BYTE
  1916                              <1>  %elifidni %3,dl
  1917                              <1>  %assign size SIZE_BYTE
  1918                              <1>  %elifidni %3,ax
  1919                              <1>  %assign size SIZE_SHORT
  1920                              <1>  %elifidni %3,dx
  1921                              <1>  %assign size SIZE_SHORT
  1922                              <1>  %else
  1923                              <1>  %assign size SIZE_LONG
  1924                              <1>  %endif
  1925 00008707 040301              <1>  db %%end-%%beg,%6,size
  1926                              <1> %%name:
  1927 0000870A 494D554C4100        <1>  db %1,0
  1928                              <1> %%beg:
  1929                              <1>  %ifidni %4,none
  1930 00008710 66F7EA              <1>  %2 %3
  1931                              <1>  %elifidni %5,none
  1932                              <1>  %2 %3,%4
  1933                              <1>  %else
  1934                              <1>  %2 %3,%4,%5
  1935                              <1>  %endif
  1936 00008713 C3                  <1>  ret
  1937                              <1> %%end:
  1938                                  	defOp	"IMULA",imul,edx,none,none,TYPE_MULTIPLY
  1939                              <1>  %ifidni %3,al
  1940                              <1>  %assign size SIZE_BYTE
  1941                              <1>  %elifidni %3,dl
  1942                              <1>  %assign size SIZE_BYTE
  1943                              <1>  %elifidni %3,ax
  1944                              <1>  %assign size SIZE_SHORT
  1945                              <1>  %elifidni %3,dx
  1946                              <1>  %assign size SIZE_SHORT
  1947                              <1>  %else
  1948                              <1>  %assign size SIZE_LONG
  1949                              <1>  %endif
  1950 00008714 030302              <1>  db %%end-%%beg,%6,size
  1951                              <1> %%name:
  1952 00008717 494D554C4100        <1>  db %1,0
  1953                              <1> %%beg:
  1954                              <1>  %ifidni %4,none
  1955 0000871D F7EA                <1>  %2 %3
  1956                              <1>  %elifidni %5,none
  1957                              <1>  %2 %3,%4
  1958                              <1>  %else
  1959                              <1>  %2 %3,%4,%5
  1960                              <1>  %endif
  1961 0000871F C3                  <1>  ret
  1962                              <1> %%end:
  1963                                  	defOp	"IMUL",imul,ax,dx,none,TYPE_MULTIPLY
  1964                              <1>  %ifidni %3,al
  1965                              <1>  %assign size SIZE_BYTE
  1966                              <1>  %elifidni %3,dl
  1967                              <1>  %assign size SIZE_BYTE
  1968                              <1>  %elifidni %3,ax
  1969                              <1>  %assign size SIZE_SHORT
  1970                              <1>  %elifidni %3,dx
  1971                              <1>  %assign size SIZE_SHORT
  1972                              <1>  %else
  1973                              <1>  %assign size SIZE_LONG
  1974                              <1>  %endif
  1975 00008720 050301              <1>  db %%end-%%beg,%6,size
  1976                              <1> %%name:
  1977 00008723 494D554C00          <1>  db %1,0
  1978                              <1> %%beg:
  1979                              <1>  %ifidni %4,none
  1980                              <1>  %2 %3
  1981                              <1>  %elifidni %5,none
  1982 00008728 660FAFC2            <1>  %2 %3,%4
  1983                              <1>  %else
  1984                              <1>  %2 %3,%4,%5
  1985                              <1>  %endif
  1986 0000872C C3                  <1>  ret
  1987                              <1> %%end:
  1988                                  	defOp	"IMUL",imul,eax,edx,none,TYPE_MULTIPLY
  1989                              <1>  %ifidni %3,al
  1990                              <1>  %assign size SIZE_BYTE
  1991                              <1>  %elifidni %3,dl
  1992                              <1>  %assign size SIZE_BYTE
  1993                              <1>  %elifidni %3,ax
  1994                              <1>  %assign size SIZE_SHORT
  1995                              <1>  %elifidni %3,dx
  1996                              <1>  %assign size SIZE_SHORT
  1997                              <1>  %else
  1998                              <1>  %assign size SIZE_LONG
  1999                              <1>  %endif
  2000 0000872D 040302              <1>  db %%end-%%beg,%6,size
  2001                              <1> %%name:
  2002 00008730 494D554C00          <1>  db %1,0
  2003                              <1> %%beg:
  2004                              <1>  %ifidni %4,none
  2005                              <1>  %2 %3
  2006                              <1>  %elifidni %5,none
  2007 00008735 0FAFC2              <1>  %2 %3,%4
  2008                              <1>  %else
  2009                              <1>  %2 %3,%4,%5
  2010                              <1>  %endif
  2011 00008738 C3                  <1>  ret
  2012                              <1> %%end:
  2013                                  	defOp	"IMUL8",imul,ax,dx,0x77,TYPE_MULTIPLY
  2014                              <1>  %ifidni %3,al
  2015                              <1>  %assign size SIZE_BYTE
  2016                              <1>  %elifidni %3,dl
  2017                              <1>  %assign size SIZE_BYTE
  2018                              <1>  %elifidni %3,ax
  2019                              <1>  %assign size SIZE_SHORT
  2020                              <1>  %elifidni %3,dx
  2021                              <1>  %assign size SIZE_SHORT
  2022                              <1>  %else
  2023                              <1>  %assign size SIZE_LONG
  2024                              <1>  %endif
  2025 00008739 060301              <1>  db %%end-%%beg,%6,size
  2026                              <1> %%name:
  2027 0000873C 494D554C3800        <1>  db %1,0
  2028                              <1> %%beg:
  2029                              <1>  %ifidni %4,none
  2030                              <1>  %2 %3
  2031                              <1>  %elifidni %5,none
  2032                              <1>  %2 %3,%4
  2033                              <1>  %else
  2034 00008742 6669C27700          <1>  %2 %3,%4,%5
  2035                              <1>  %endif
  2036 00008747 C3                  <1>  ret
  2037                              <1> %%end:
  2038                                  	defOp	"IMUL8",imul,ax,dx,-0x77,TYPE_MULTIPLY
  2039                              <1>  %ifidni %3,al
  2040                              <1>  %assign size SIZE_BYTE
  2041                              <1>  %elifidni %3,dl
  2042                              <1>  %assign size SIZE_BYTE
  2043                              <1>  %elifidni %3,ax
  2044                              <1>  %assign size SIZE_SHORT
  2045                              <1>  %elifidni %3,dx
  2046                              <1>  %assign size SIZE_SHORT
  2047                              <1>  %else
  2048                              <1>  %assign size SIZE_LONG
  2049                              <1>  %endif
  2050 00008748 060301              <1>  db %%end-%%beg,%6,size
  2051                              <1> %%name:
  2052 0000874B 494D554C3800        <1>  db %1,0
  2053                              <1> %%beg:
  2054                              <1>  %ifidni %4,none
  2055                              <1>  %2 %3
  2056                              <1>  %elifidni %5,none
  2057                              <1>  %2 %3,%4
  2058                              <1>  %else
  2059 00008751 6669C289FF          <1>  %2 %3,%4,%5
  2060                              <1>  %endif
  2061 00008756 C3                  <1>  ret
  2062                              <1> %%end:
  2063                                  	defOp	"IMUL8",imul,eax,edx,0x77,TYPE_MULTIPLY
  2064                              <1>  %ifidni %3,al
  2065                              <1>  %assign size SIZE_BYTE
  2066                              <1>  %elifidni %3,dl
  2067                              <1>  %assign size SIZE_BYTE
  2068                              <1>  %elifidni %3,ax
  2069                              <1>  %assign size SIZE_SHORT
  2070                              <1>  %elifidni %3,dx
  2071                              <1>  %assign size SIZE_SHORT
  2072                              <1>  %else
  2073                              <1>  %assign size SIZE_LONG
  2074                              <1>  %endif
  2075 00008757 070302              <1>  db %%end-%%beg,%6,size
  2076                              <1> %%name:
  2077 0000875A 494D554C3800        <1>  db %1,0
  2078                              <1> %%beg:
  2079                              <1>  %ifidni %4,none
  2080                              <1>  %2 %3
  2081                              <1>  %elifidni %5,none
  2082                              <1>  %2 %3,%4
  2083                              <1>  %else
  2084 00008760 69C277000000        <1>  %2 %3,%4,%5
  2085                              <1>  %endif
  2086 00008766 C3                  <1>  ret
  2087                              <1> %%end:
  2088                                  	defOp	"IMUL8",imul,eax,edx,-0x77,TYPE_MULTIPLY
  2089                              <1>  %ifidni %3,al
  2090                              <1>  %assign size SIZE_BYTE
  2091                              <1>  %elifidni %3,dl
  2092                              <1>  %assign size SIZE_BYTE
  2093                              <1>  %elifidni %3,ax
  2094                              <1>  %assign size SIZE_SHORT
  2095                              <1>  %elifidni %3,dx
  2096                              <1>  %assign size SIZE_SHORT
  2097                              <1>  %else
  2098                              <1>  %assign size SIZE_LONG
  2099                              <1>  %endif
  2100 00008767 070302              <1>  db %%end-%%beg,%6,size
  2101                              <1> %%name:
  2102 0000876A 494D554C3800        <1>  db %1,0
  2103                              <1> %%beg:
  2104                              <1>  %ifidni %4,none
  2105                              <1>  %2 %3
  2106                              <1>  %elifidni %5,none
  2107                              <1>  %2 %3,%4
  2108                              <1>  %else
  2109 00008770 69C289FFFFFF        <1>  %2 %3,%4,%5
  2110                              <1>  %endif
  2111 00008776 C3                  <1>  ret
  2112                              <1> %%end:
  2113                                  	defOp	"IMUL16",imul,ax,0x777,none,TYPE_MULTIPLY
  2114                              <1>  %ifidni %3,al
  2115                              <1>  %assign size SIZE_BYTE
  2116                              <1>  %elifidni %3,dl
  2117                              <1>  %assign size SIZE_BYTE
  2118                              <1>  %elifidni %3,ax
  2119                              <1>  %assign size SIZE_SHORT
  2120                              <1>  %elifidni %3,dx
  2121                              <1>  %assign size SIZE_SHORT
  2122                              <1>  %else
  2123                              <1>  %assign size SIZE_LONG
  2124                              <1>  %endif
  2125 00008777 060301              <1>  db %%end-%%beg,%6,size
  2126                              <1> %%name:
  2127 0000877A 494D554C313600      <1>  db %1,0
  2128                              <1> %%beg:
  2129                              <1>  %ifidni %4,none
  2130                              <1>  %2 %3
  2131                              <1>  %elifidni %5,none
  2132 00008781 6669C07707          <1>  %2 %3,%4
  2133                              <1>  %else
  2134                              <1>  %2 %3,%4,%5
  2135                              <1>  %endif
  2136 00008786 C3                  <1>  ret
  2137                              <1> %%end:
  2138                                  	defOp	"IMUL32",imul,eax,0x777777,none,TYPE_MULTIPLY
  2139                              <1>  %ifidni %3,al
  2140                              <1>  %assign size SIZE_BYTE
  2141                              <1>  %elifidni %3,dl
  2142                              <1>  %assign size SIZE_BYTE
  2143                              <1>  %elifidni %3,ax
  2144                              <1>  %assign size SIZE_SHORT
  2145                              <1>  %elifidni %3,dx
  2146                              <1>  %assign size SIZE_SHORT
  2147                              <1>  %else
  2148                              <1>  %assign size SIZE_LONG
  2149                              <1>  %endif
  2150 00008787 070302              <1>  db %%end-%%beg,%6,size
  2151                              <1> %%name:
  2152 0000878A 494D554C333200      <1>  db %1,0
  2153                              <1> %%beg:
  2154                              <1>  %ifidni %4,none
  2155                              <1>  %2 %3
  2156                              <1>  %elifidni %5,none
  2157 00008791 69C077777700        <1>  %2 %3,%4
  2158                              <1>  %else
  2159                              <1>  %2 %3,%4,%5
  2160                              <1>  %endif
  2161 00008797 C3                  <1>  ret
  2162                              <1> %%end:
  2163                                  	defOp	"DIVDL",div,dl,none,none,TYPE_DIVIDE
  2164                              <1>  %ifidni %3,al
  2165                              <1>  %assign size SIZE_BYTE
  2166                              <1>  %elifidni %3,dl
  2167                              <1>  %assign size SIZE_BYTE
  2168                              <1>  %elifidni %3,ax
  2169                              <1>  %assign size SIZE_SHORT
  2170                              <1>  %elifidni %3,dx
  2171                              <1>  %assign size SIZE_SHORT
  2172                              <1>  %else
  2173                              <1>  %assign size SIZE_LONG
  2174                              <1>  %endif
  2175 00008798 030400              <1>  db %%end-%%beg,%6,size
  2176                              <1> %%name:
  2177 0000879B 444956444C00        <1>  db %1,0
  2178                              <1> %%beg:
  2179                              <1>  %ifidni %4,none
  2180 000087A1 F6F2                <1>  %2 %3
  2181                              <1>  %elifidni %5,none
  2182                              <1>  %2 %3,%4
  2183                              <1>  %else
  2184                              <1>  %2 %3,%4,%5
  2185                              <1>  %endif
  2186 000087A3 C3                  <1>  ret
  2187                              <1> %%end:
  2188                                  	defOp	"DIVDX",div,dx,none,none,TYPE_DIVIDE
  2189                              <1>  %ifidni %3,al
  2190                              <1>  %assign size SIZE_BYTE
  2191                              <1>  %elifidni %3,dl
  2192                              <1>  %assign size SIZE_BYTE
  2193                              <1>  %elifidni %3,ax
  2194                              <1>  %assign size SIZE_SHORT
  2195                              <1>  %elifidni %3,dx
  2196                              <1>  %assign size SIZE_SHORT
  2197                              <1>  %else
  2198                              <1>  %assign size SIZE_LONG
  2199                              <1>  %endif
  2200 000087A4 040401              <1>  db %%end-%%beg,%6,size
  2201                              <1> %%name:
  2202 000087A7 444956445800        <1>  db %1,0
  2203                              <1> %%beg:
  2204                              <1>  %ifidni %4,none
  2205 000087AD 66F7F2              <1>  %2 %3
  2206                              <1>  %elifidni %5,none
  2207                              <1>  %2 %3,%4
  2208                              <1>  %else
  2209                              <1>  %2 %3,%4,%5
  2210                              <1>  %endif
  2211 000087B0 C3                  <1>  ret
  2212                              <1> %%end:
  2213                                  	defOp	"DIVEDX",div,edx,none,none,TYPE_DIVIDE
  2214                              <1>  %ifidni %3,al
  2215                              <1>  %assign size SIZE_BYTE
  2216                              <1>  %elifidni %3,dl
  2217                              <1>  %assign size SIZE_BYTE
  2218                              <1>  %elifidni %3,ax
  2219                              <1>  %assign size SIZE_SHORT
  2220                              <1>  %elifidni %3,dx
  2221                              <1>  %assign size SIZE_SHORT
  2222                              <1>  %else
  2223                              <1>  %assign size SIZE_LONG
  2224                              <1>  %endif
  2225 000087B1 030402              <1>  db %%end-%%beg,%6,size
  2226                              <1> %%name:
  2227 000087B4 44495645445800      <1>  db %1,0
  2228                              <1> %%beg:
  2229                              <1>  %ifidni %4,none
  2230 000087BB F7F2                <1>  %2 %3
  2231                              <1>  %elifidni %5,none
  2232                              <1>  %2 %3,%4
  2233                              <1>  %else
  2234                              <1>  %2 %3,%4,%5
  2235                              <1>  %endif
  2236 000087BD C3                  <1>  ret
  2237                              <1> %%end:
  2238                                  	defOp	"DIVAL",div,al,none,none,TYPE_DIVIDE
  2239                              <1>  %ifidni %3,al
  2240                              <1>  %assign size SIZE_BYTE
  2241                              <1>  %elifidni %3,dl
  2242                              <1>  %assign size SIZE_BYTE
  2243                              <1>  %elifidni %3,ax
  2244                              <1>  %assign size SIZE_SHORT
  2245                              <1>  %elifidni %3,dx
  2246                              <1>  %assign size SIZE_SHORT
  2247                              <1>  %else
  2248                              <1>  %assign size SIZE_LONG
  2249                              <1>  %endif
  2250 000087BE 030400              <1>  db %%end-%%beg,%6,size
  2251                              <1> %%name:
  2252 000087C1 444956414C00        <1>  db %1,0
  2253                              <1> %%beg:
  2254                              <1>  %ifidni %4,none
  2255 000087C7 F6F0                <1>  %2 %3
  2256                              <1>  %elifidni %5,none
  2257                              <1>  %2 %3,%4
  2258                              <1>  %else
  2259                              <1>  %2 %3,%4,%5
  2260                              <1>  %endif
  2261 000087C9 C3                  <1>  ret
  2262                              <1> %%end:
  2263                                  	defOp	"DIVAX",div,ax,none,none,TYPE_DIVIDE
  2264                              <1>  %ifidni %3,al
  2265                              <1>  %assign size SIZE_BYTE
  2266                              <1>  %elifidni %3,dl
  2267                              <1>  %assign size SIZE_BYTE
  2268                              <1>  %elifidni %3,ax
  2269                              <1>  %assign size SIZE_SHORT
  2270                              <1>  %elifidni %3,dx
  2271                              <1>  %assign size SIZE_SHORT
  2272                              <1>  %else
  2273                              <1>  %assign size SIZE_LONG
  2274                              <1>  %endif
  2275 000087CA 040401              <1>  db %%end-%%beg,%6,size
  2276                              <1> %%name:
  2277 000087CD 444956415800        <1>  db %1,0
  2278                              <1> %%beg:
  2279                              <1>  %ifidni %4,none
  2280 000087D3 66F7F0              <1>  %2 %3
  2281                              <1>  %elifidni %5,none
  2282                              <1>  %2 %3,%4
  2283                              <1>  %else
  2284                              <1>  %2 %3,%4,%5
  2285                              <1>  %endif
  2286 000087D6 C3                  <1>  ret
  2287                              <1> %%end:
  2288                                  	defOp	"DIVEAX",div,eax,none,none,TYPE_DIVIDE
  2289                              <1>  %ifidni %3,al
  2290                              <1>  %assign size SIZE_BYTE
  2291                              <1>  %elifidni %3,dl
  2292                              <1>  %assign size SIZE_BYTE
  2293                              <1>  %elifidni %3,ax
  2294                              <1>  %assign size SIZE_SHORT
  2295                              <1>  %elifidni %3,dx
  2296                              <1>  %assign size SIZE_SHORT
  2297                              <1>  %else
  2298                              <1>  %assign size SIZE_LONG
  2299                              <1>  %endif
  2300 000087D7 030402              <1>  db %%end-%%beg,%6,size
  2301                              <1> %%name:
  2302 000087DA 44495645415800      <1>  db %1,0
  2303                              <1> %%beg:
  2304                              <1>  %ifidni %4,none
  2305 000087E1 F7F0                <1>  %2 %3
  2306                              <1>  %elifidni %5,none
  2307                              <1>  %2 %3,%4
  2308                              <1>  %else
  2309                              <1>  %2 %3,%4,%5
  2310                              <1>  %endif
  2311 000087E3 C3                  <1>  ret
  2312                              <1> %%end:
  2313                                  	defOp	"IDIVDL",idiv,dl,none,none,TYPE_DIVIDE
  2314                              <1>  %ifidni %3,al
  2315                              <1>  %assign size SIZE_BYTE
  2316                              <1>  %elifidni %3,dl
  2317                              <1>  %assign size SIZE_BYTE
  2318                              <1>  %elifidni %3,ax
  2319                              <1>  %assign size SIZE_SHORT
  2320                              <1>  %elifidni %3,dx
  2321                              <1>  %assign size SIZE_SHORT
  2322                              <1>  %else
  2323                              <1>  %assign size SIZE_LONG
  2324                              <1>  %endif
  2325 000087E4 030400              <1>  db %%end-%%beg,%6,size
  2326                              <1> %%name:
  2327 000087E7 49444956444C00      <1>  db %1,0
  2328                              <1> %%beg:
  2329                              <1>  %ifidni %4,none
  2330 000087EE F6FA                <1>  %2 %3
  2331                              <1>  %elifidni %5,none
  2332                              <1>  %2 %3,%4
  2333                              <1>  %else
  2334                              <1>  %2 %3,%4,%5
  2335                              <1>  %endif
  2336 000087F0 C3                  <1>  ret
  2337                              <1> %%end:
  2338                                  	defOp	"IDIVDX",idiv,dx,none,none,TYPE_DIVIDE
  2339                              <1>  %ifidni %3,al
  2340                              <1>  %assign size SIZE_BYTE
  2341                              <1>  %elifidni %3,dl
  2342                              <1>  %assign size SIZE_BYTE
  2343                              <1>  %elifidni %3,ax
  2344                              <1>  %assign size SIZE_SHORT
  2345                              <1>  %elifidni %3,dx
  2346                              <1>  %assign size SIZE_SHORT
  2347                              <1>  %else
  2348                              <1>  %assign size SIZE_LONG
  2349                              <1>  %endif
  2350 000087F1 040401              <1>  db %%end-%%beg,%6,size
  2351                              <1> %%name:
  2352 000087F4 49444956445800      <1>  db %1,0
  2353                              <1> %%beg:
  2354                              <1>  %ifidni %4,none
  2355 000087FB 66F7FA              <1>  %2 %3
  2356                              <1>  %elifidni %5,none
  2357                              <1>  %2 %3,%4
  2358                              <1>  %else
  2359                              <1>  %2 %3,%4,%5
  2360                              <1>  %endif
  2361 000087FE C3                  <1>  ret
  2362                              <1> %%end:
  2363                                  	defOp	"IDIVEDX",idiv,edx,none,none,TYPE_DIVIDE
  2364                              <1>  %ifidni %3,al
  2365                              <1>  %assign size SIZE_BYTE
  2366                              <1>  %elifidni %3,dl
  2367                              <1>  %assign size SIZE_BYTE
  2368                              <1>  %elifidni %3,ax
  2369                              <1>  %assign size SIZE_SHORT
  2370                              <1>  %elifidni %3,dx
  2371                              <1>  %assign size SIZE_SHORT
  2372                              <1>  %else
  2373                              <1>  %assign size SIZE_LONG
  2374                              <1>  %endif
  2375 000087FF 030402              <1>  db %%end-%%beg,%6,size
  2376                              <1> %%name:
  2377 00008802 4944495645445800    <1>  db %1,0
  2378                              <1> %%beg:
  2379                              <1>  %ifidni %4,none
  2380 0000880A F7FA                <1>  %2 %3
  2381                              <1>  %elifidni %5,none
  2382                              <1>  %2 %3,%4
  2383                              <1>  %else
  2384                              <1>  %2 %3,%4,%5
  2385                              <1>  %endif
  2386 0000880C C3                  <1>  ret
  2387                              <1> %%end:
  2388                                  	defOp	"IDIVAL",idiv,al,none,none,TYPE_DIVIDE
  2389                              <1>  %ifidni %3,al
  2390                              <1>  %assign size SIZE_BYTE
  2391                              <1>  %elifidni %3,dl
  2392                              <1>  %assign size SIZE_BYTE
  2393                              <1>  %elifidni %3,ax
  2394                              <1>  %assign size SIZE_SHORT
  2395                              <1>  %elifidni %3,dx
  2396                              <1>  %assign size SIZE_SHORT
  2397                              <1>  %else
  2398                              <1>  %assign size SIZE_LONG
  2399                              <1>  %endif
  2400 0000880D 030400              <1>  db %%end-%%beg,%6,size
  2401                              <1> %%name:
  2402 00008810 49444956414C00      <1>  db %1,0
  2403                              <1> %%beg:
  2404                              <1>  %ifidni %4,none
  2405 00008817 F6F8                <1>  %2 %3
  2406                              <1>  %elifidni %5,none
  2407                              <1>  %2 %3,%4
  2408                              <1>  %else
  2409                              <1>  %2 %3,%4,%5
  2410                              <1>  %endif
  2411 00008819 C3                  <1>  ret
  2412                              <1> %%end:
  2413                                  	defOp	"IDIVAX",idiv,ax,none,none,TYPE_DIVIDE
  2414                              <1>  %ifidni %3,al
  2415                              <1>  %assign size SIZE_BYTE
  2416                              <1>  %elifidni %3,dl
  2417                              <1>  %assign size SIZE_BYTE
  2418                              <1>  %elifidni %3,ax
  2419                              <1>  %assign size SIZE_SHORT
  2420                              <1>  %elifidni %3,dx
  2421                              <1>  %assign size SIZE_SHORT
  2422                              <1>  %else
  2423                              <1>  %assign size SIZE_LONG
  2424                              <1>  %endif
  2425 0000881A 040401              <1>  db %%end-%%beg,%6,size
  2426                              <1> %%name:
  2427 0000881D 49444956415800      <1>  db %1,0
  2428                              <1> %%beg:
  2429                              <1>  %ifidni %4,none
  2430 00008824 66F7F8              <1>  %2 %3
  2431                              <1>  %elifidni %5,none
  2432                              <1>  %2 %3,%4
  2433                              <1>  %else
  2434                              <1>  %2 %3,%4,%5
  2435                              <1>  %endif
  2436 00008827 C3                  <1>  ret
  2437                              <1> %%end:
  2438                                  	defOp	"IDIVEAX",idiv,eax,none,none,TYPE_DIVIDE
  2439                              <1>  %ifidni %3,al
  2440                              <1>  %assign size SIZE_BYTE
  2441                              <1>  %elifidni %3,dl
  2442                              <1>  %assign size SIZE_BYTE
  2443                              <1>  %elifidni %3,ax
  2444                              <1>  %assign size SIZE_SHORT
  2445                              <1>  %elifidni %3,dx
  2446                              <1>  %assign size SIZE_SHORT
  2447                              <1>  %else
  2448                              <1>  %assign size SIZE_LONG
  2449                              <1>  %endif
  2450 00008828 030402              <1>  db %%end-%%beg,%6,size
  2451                              <1> %%name:
  2452 0000882B 4944495645415800    <1>  db %1,0
  2453                              <1> %%beg:
  2454                              <1>  %ifidni %4,none
  2455 00008833 F7F8                <1>  %2 %3
  2456                              <1>  %elifidni %5,none
  2457                              <1>  %2 %3,%4
  2458                              <1>  %else
  2459                              <1>  %2 %3,%4,%5
  2460                              <1>  %endif
  2461 00008835 C3                  <1>  ret
  2462                              <1> %%end:
  2463 00008836 00                      	db	0
  2464
  2465 00008837 90                      	align	4
  2466
  2467                                  typeMasks:
  2468 00008838 D5080000                	dd	PS_ARITH
  2469 0000883C D5080000                	dd	PS_ARITH
  2470 00008840 C5080000                	dd	PS_LOGIC
  2471 00008844 01080000                	dd	PS_MULTIPLY
  2472 00008848 00000000                	dd	PS_DIVIDE
  2473
  2474                                  arithValues:
  2475 0000884C 000000000100000002-     .bvals:	dd	0x00,0x01,0x02,0x7E,0x7F,0x80,0x81,0xFE,0xFF
  2476 00008855 0000007E0000007F00-
  2477 0000885E 000080000000810000-
  2478 00008867 00FE000000FF000000
  2479                                  	ARITH_BYTES equ ($-.bvals)/4
  2480
  2481 00008870 000000000100000002-     .wvals:	dd	0x0000,0x0001,0x0002,0x7FFE,0x7FFF,0x8000,0x8001,0xFFFE,0xFFFF
  2482 00008879 000000FE7F0000FF7F-
  2483 00008882 000000800000018000-
  2484 0000888B 00FEFF0000FFFF0000
  2485                                  	ARITH_WORDS equ ($-.wvals)/4
  2486
  2487 00008894 000000000100000002-     .dvals:	dd	0x00000000,0x00000001,0x00000002,0x7FFFFFFE,0x7FFFFFFF,0x80000000,0x80000001,0xFFFFFFFE,0xFFFFFFFF
  2488 0000889D 000000FEFFFF7FFFFF-
  2489 000088A6 FF7F00000080010000-
  2490 000088AF 80FEFFFFFFFFFFFFFF
  2491                                  	ARITH_DWORDS equ ($-.dvals)/4
  2492
  2493                                  muldivValues:
  2494 000088B8 000000000100000002-     .bvals:	dd	0x00,0x01,0x02,0x3F,0x40,0x41,0x7E,0x7F,0x80,0x81,0xFE,0xFF
  2495 000088C1 0000003F0000004000-
  2496 000088CA 0000410000007E0000-
  2497 000088D3 007F00000080000000-
  2498 000088DC 81000000FE000000FF-
  2499 000088E5 000000
  2500                                  	MULDIV_BYTES equ ($-.bvals)/4
  2501
  2502 000088E8 000000000100000002-     .wvals:	dd	0x0000,0x0001,0x0002,0x3FFF,0x4000,0x4001,0x7FFE,0x7FFF,0x8000,0x8001,0xFFFE,0xFFFF
  2503 000088F1 000000FF3F00000040-
  2504 000088FA 000001400000FE7F00-
  2505 00008903 00FF7F000000800000-
  2506 0000890C 01800000FEFF0000FF-
  2507 00008915 FF0000
  2508                                  	MULDIV_WORDS equ ($-.wvals)/4
  2509
  2510 00008918 000000000100000002-     .dvals:	dd	0x00000000,0x00000001,0x00000002,0x3FFFFFFF,0x40000000,0x40000001,0x7FFFFFFE,0x7FFFFFFF,0x80000000,0x80000001,0xFFFFFFFE,0xFFFFFFFF
  2511 00008921 000000FFFFFF3F0000-
  2512 0000892A 004001000040FEFFFF-
  2513 00008933 7FFFFFFF7F00000080-
  2514 0000893C 01000080FEFFFFFFFF-
  2515 00008945 FFFFFF
  2516                                  	MULDIV_DWORDS equ ($-.dvals)/4
  2517
  2518                                  typeValues:
  2519                                  	;
  2520                                  	; Values for TYPE_ARITH
  2521                                  	;
  2522 00008948 09000000[4C880000]-     	dd	ARITH_BYTES,arithValues,ARITH_BYTES,arithValues
  2523 00008950 09000000[4C880000]
  2524 00008958 12000000[4C880000]-     	dd	ARITH_BYTES+ARITH_WORDS,arithValues,ARITH_BYTES+ARITH_WORDS,arithValues
  2525 00008960 12000000[4C880000]
  2526 00008968 1B000000[4C880000]-     	dd	ARITH_BYTES+ARITH_WORDS+ARITH_DWORDS,arithValues,ARITH_BYTES+ARITH_WORDS+ARITH_DWORDS,arithValues
  2527 00008970 1B000000[4C880000]
  2528 00008978 000000000000000000-     	dd	0,0,0,0
  2529 00008981 00000000000000
  2530                                  	;
  2531                                  	; Values for TYPE_ARITH1
  2532                                  	;
  2533 00008988 09000000[4C880000]-     	dd	ARITH_BYTES,arithValues,1,arithValues
  2534 00008990 01000000[4C880000]
  2535 00008998 12000000[4C880000]-     	dd	ARITH_BYTES+ARITH_WORDS,arithValues,1,arithValues
  2536 000089A0 01000000[4C880000]
  2537 000089A8 1B000000[4C880000]-     	dd	ARITH_BYTES+ARITH_WORDS+ARITH_DWORDS,arithValues,1,arithValues
  2538 000089B0 01000000[4C880000]
  2539 000089B8 000000000000000000-     	dd	0,0,0,0
  2540 000089C1 00000000000000
  2541                                  	;
  2542                                  	; Values for TYPE_LOGIC (using ARITH values for now)
  2543                                  	;
  2544 000089C8 09000000[4C880000]-     	dd	ARITH_BYTES,arithValues,ARITH_BYTES,arithValues
  2545 000089D0 09000000[4C880000]
  2546 000089D8 12000000[4C880000]-     	dd	ARITH_BYTES+ARITH_WORDS,arithValues,ARITH_BYTES+ARITH_WORDS,arithValues
  2547 000089E0 12000000[4C880000]
  2548 000089E8 1B000000[4C880000]-     	dd	ARITH_BYTES+ARITH_WORDS+ARITH_DWORDS,arithValues,ARITH_BYTES+ARITH_WORDS+ARITH_DWORDS,arithValues
  2549 000089F0 1B000000[4C880000]
  2550 000089F8 000000000000000000-     	dd	0,0,0,0
  2551 00008A01 00000000000000
  2552                                  	;
  2553                                  	; Values for TYPE_MULTIPLY (a superset of ARITH values)
  2554                                  	;
  2555 00008A08 0C000000[B8880000]-     	dd	MULDIV_BYTES,muldivValues,MULDIV_BYTES,muldivValues
  2556 00008A10 0C000000[B8880000]
  2557 00008A18 18000000[B8880000]-     	dd	MULDIV_BYTES+MULDIV_WORDS,muldivValues,MULDIV_BYTES+MULDIV_WORDS,muldivValues
  2558 00008A20 18000000[B8880000]
  2559 00008A28 24000000[B8880000]-     	dd	MULDIV_BYTES+MULDIV_WORDS+MULDIV_DWORDS,muldivValues,MULDIV_BYTES+MULDIV_WORDS+MULDIV_DWORDS,muldivValues
  2560 00008A30 24000000[B8880000]
  2561 00008A38 000000000000000000-     	dd	0,0,0,0
  2562 00008A41 00000000000000
  2563                                  	;
  2564                                  	; Values for TYPE_DIVIDE
  2565                                  	;
  2566 00008A48 0C000000[B8880000]-     	dd	MULDIV_BYTES,muldivValues,MULDIV_BYTES,muldivValues
  2567 00008A50 0C000000[B8880000]
  2568 00008A58 18000000[B8880000]-     	dd	MULDIV_BYTES+MULDIV_WORDS,muldivValues,MULDIV_BYTES+MULDIV_WORDS,muldivValues
  2569 00008A60 18000000[B8880000]
  2570 00008A68 24000000[B8880000]-     	dd	MULDIV_BYTES+MULDIV_WORDS+MULDIV_DWORDS,muldivValues,MULDIV_BYTES+MULDIV_WORDS+MULDIV_DWORDS,muldivValues
  2571 00008A70 24000000[B8880000]
  2572 00008A78 000000000000000000-     	dd	0,0,0,0
  2573 00008A81 00000000000000
  2574
  2575 00008A88 EBFE                    error:	jmp	error
  2576
  2577 00008A8A 90<rept>                	times	OFF_INTDIVERR-0x100-($-$$) nop
  2578
  2579                                  intDivErr:
  2580 0000DF00 56                      	push	esi
  2581 0000DF01 BE[A2850000]            	mov	esi,strDE
  2582 0000DF06 E852A6FFFF              	call	printStr
  2583 0000DF0B 5E                      	pop	esi
  2584                                  ;
  2585                                  ;   It's rather annoying that the 80386 treats #DE as a fault rather than a trap, leaving CS:EIP pointing to the
  2586                                  ;   faulting instruction instead of the RET we conveniently placed after it.  So, instead of trying to calculate where
  2587                                  ;   that RET is, we simply set EIP on the stack to point to our own RET.
  2588                                  ;
  2589 0000DF0C C7842400000000-         	mov	dword [esp],intDivRet
  2590 0000DF13 [18DF0000]
  2591 0000DF17 CF                      	iretd
  2592                                  intDivRet:
  2593 0000DF18 C3                      	ret
  2594
  2595                                  doneProt:
  2596 0000DF19 66B81800                	mov	ax,DSEG_PROT16
  2597 0000DF1D 8ED0                    	mov	ss,ax
  2598 0000DF1F 29E4                    	sub	esp,esp
  2599
  2600                                      %ifndef REAL32
  2601                                  ;
  2602                                  ;   Return to real-mode, after first resetting the IDTR and loading CS with a 16-bit code segment
  2603                                  ;
  2604 0000DF21 2E0F011D[A0800000]      	o32 lidt [cs:addrIDTReal]
  2605 0000DF29 EA[30DF0000]0800        	jmp	CSEG_PROT16:toProt16
  2606                                  toProt16:
  2607                                  	bits	16
  2608                                      %endif
  2609
  2610                                  goReal:
  2611 0000DF30 0F20C0                  	mov	eax,cr0
  2612 0000DF33 6625FEFFFF7F            	and	eax,~(CR0_MSW_PE | CR0_PG) & 0xffffffff
  2613 0000DF39 0F22C0                  	mov	cr0,eax
  2614                                  jmpReal:
  2615 0000DF3C EA[41DF]00F0            	jmp	CSEG_REAL:toReal
  2616
  2617                                  toReal:
  2618 0000DF41 8CC8                    	mov	ax,cs				; revert to the usual .COM register conventions
  2619 0000DF43 8ED8                    	mov	ds,ax
  2620 0000DF45 8EC0                    	mov	es,ax
  2621 0000DF47 8ED0                    	mov	ss,ax
  2622 0000DF49 BCFEFF                  	mov	sp,0xfffe
  2623
  2624 0000DF4C 3D00F0                  	cmp	ax,CSEG_REAL			; is CS equal to 0xf000?
  2625 0000DF4F 74FE                    spin:	je	spin ; near jmpStart		; yes, so loop around, because we have nowhere else to go
  2626 0000DF51 CD20                    	int	INT_DOSEXIT			; no, so assume we're running under DOS and exit
  2627
  2628                                  ;
  2629                                  ;   Fill the remaining space with NOPs until we get to target offset 0xFFF0.
  2630                                  ;   Note that we subtract 0x100 from the target offset because we're ORG'ed at 0x100.
  2631                                  ;
  2632 0000DF53 90<rept>                	times	0xfff0-0x100-($-$$) nop
  2633
  2634                                  ;
  2635                                  ;   Unfortunately, when PC-DOS 2.0 loads our .COM file, the last 4 bytes are not valid, in part because DOS must
  2636                                  ;   zero the last 2 bytes so that a near RET will return to the PSP's INT 0x20 and gracefully terminate the program.
  2637                                  ;   Newer versions of DOS simply refuse to load the file (the safest thing to do), claiming insufficient memory.
  2638                                  ;
  2639                                  ;   To avoid these loading issues, I now omit the last 4 bytes from image, and it will still work as a ROM image as
  2640                                  ;   long as jmpStart is at offset 0xFFF0.
  2641                                  ;
  2642
  2643                                  jmpStart:
  2644 0000FEF0 EA[0000]00F0            	jmp	CSEG_REAL:start			; 0000FFF0
  2645                                  signedWord:
  2646 0000FEF5 80                      	db	0x80				; 0000FFF5  80
  2647                                  signedByte:
  2648 0000FEF6 80                      	db	0x80				; 0000FFF6  80
  2649                                  signature:
  2650 0000FEF7 50434A5300              	db	'PCJS',0			; 0000FFF7  "PCJS",0
  2651                                  ;	db	0x00				; 0000FFFC  00
  2652                                  ;	db	0x00				; 0000FFFD  00
  2653                                  ;	db	0xFC				; 0000FFFE  FC (Model ID byte)
  2654                                  ;	db	0x00				; 0000FFFF  00 (normally a checksum byte)
